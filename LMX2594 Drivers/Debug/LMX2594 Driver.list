
LMX2594 Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f44  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080050f4  080050f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005134  08005134  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  08005134  08005134  00015134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800513c  0800513c  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005140  08005140  00015140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08005144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f0  2**0
                  CONTENTS
 10 .bss          000000bc  200000f0  200000f0  000200f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ac  200001ac  000200f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de63  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fcd  00000000  00000000  0002df83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  0002ff50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000880  00000000  00000000  000308c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023912  00000000  00000000  00031140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d6c1  00000000  00000000  00054a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3732  00000000  00000000  00062113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00135845  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002730  00000000  00000000  00135898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080050dc 	.word	0x080050dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f4 	.word	0x200000f4
 80001ec:	080050dc 	.word	0x080050dc

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b974 	b.w	8000ddc <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9d08      	ldr	r5, [sp, #32]
 8000b12:	4604      	mov	r4, r0
 8000b14:	468e      	mov	lr, r1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d14d      	bne.n	8000bb6 <__udivmoddi4+0xaa>
 8000b1a:	428a      	cmp	r2, r1
 8000b1c:	4694      	mov	ip, r2
 8000b1e:	d969      	bls.n	8000bf4 <__udivmoddi4+0xe8>
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	b152      	cbz	r2, 8000b3c <__udivmoddi4+0x30>
 8000b26:	fa01 f302 	lsl.w	r3, r1, r2
 8000b2a:	f1c2 0120 	rsb	r1, r2, #32
 8000b2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b36:	ea41 0e03 	orr.w	lr, r1, r3
 8000b3a:	4094      	lsls	r4, r2
 8000b3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b40:	0c21      	lsrs	r1, r4, #16
 8000b42:	fbbe f6f8 	udiv	r6, lr, r8
 8000b46:	fa1f f78c 	uxth.w	r7, ip
 8000b4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b52:	fb06 f107 	mul.w	r1, r6, r7
 8000b56:	4299      	cmp	r1, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x64>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b62:	f080 811f 	bcs.w	8000da4 <__udivmoddi4+0x298>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 811c 	bls.w	8000da4 <__udivmoddi4+0x298>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	4463      	add	r3, ip
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b78:	fb08 3310 	mls	r3, r8, r0, r3
 8000b7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b80:	fb00 f707 	mul.w	r7, r0, r7
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	d90a      	bls.n	8000b9e <__udivmoddi4+0x92>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b90:	f080 810a 	bcs.w	8000da8 <__udivmoddi4+0x29c>
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	f240 8107 	bls.w	8000da8 <__udivmoddi4+0x29c>
 8000b9a:	4464      	add	r4, ip
 8000b9c:	3802      	subs	r0, #2
 8000b9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba2:	1be4      	subs	r4, r4, r7
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	b11d      	cbz	r5, 8000bb0 <__udivmoddi4+0xa4>
 8000ba8:	40d4      	lsrs	r4, r2
 8000baa:	2300      	movs	r3, #0
 8000bac:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d909      	bls.n	8000bce <__udivmoddi4+0xc2>
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	f000 80ef 	beq.w	8000d9e <__udivmoddi4+0x292>
 8000bc0:	2600      	movs	r6, #0
 8000bc2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc6:	4630      	mov	r0, r6
 8000bc8:	4631      	mov	r1, r6
 8000bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bce:	fab3 f683 	clz	r6, r3
 8000bd2:	2e00      	cmp	r6, #0
 8000bd4:	d14a      	bne.n	8000c6c <__udivmoddi4+0x160>
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d302      	bcc.n	8000be0 <__udivmoddi4+0xd4>
 8000bda:	4282      	cmp	r2, r0
 8000bdc:	f200 80f9 	bhi.w	8000dd2 <__udivmoddi4+0x2c6>
 8000be0:	1a84      	subs	r4, r0, r2
 8000be2:	eb61 0303 	sbc.w	r3, r1, r3
 8000be6:	2001      	movs	r0, #1
 8000be8:	469e      	mov	lr, r3
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d0e0      	beq.n	8000bb0 <__udivmoddi4+0xa4>
 8000bee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bf2:	e7dd      	b.n	8000bb0 <__udivmoddi4+0xa4>
 8000bf4:	b902      	cbnz	r2, 8000bf8 <__udivmoddi4+0xec>
 8000bf6:	deff      	udf	#255	; 0xff
 8000bf8:	fab2 f282 	clz	r2, r2
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	f040 8092 	bne.w	8000d26 <__udivmoddi4+0x21a>
 8000c02:	eba1 010c 	sub.w	r1, r1, ip
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f fe8c 	uxth.w	lr, ip
 8000c0e:	2601      	movs	r6, #1
 8000c10:	0c20      	lsrs	r0, r4, #16
 8000c12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c16:	fb07 1113 	mls	r1, r7, r3, r1
 8000c1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c1e:	fb0e f003 	mul.w	r0, lr, r3
 8000c22:	4288      	cmp	r0, r1
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x12c>
 8000c26:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x12a>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f200 80cb 	bhi.w	8000dcc <__udivmoddi4+0x2c0>
 8000c36:	4643      	mov	r3, r8
 8000c38:	1a09      	subs	r1, r1, r0
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c40:	fb07 1110 	mls	r1, r7, r0, r1
 8000c44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c48:	fb0e fe00 	mul.w	lr, lr, r0
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x156>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c58:	d202      	bcs.n	8000c60 <__udivmoddi4+0x154>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f200 80bb 	bhi.w	8000dd6 <__udivmoddi4+0x2ca>
 8000c60:	4608      	mov	r0, r1
 8000c62:	eba4 040e 	sub.w	r4, r4, lr
 8000c66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c6a:	e79c      	b.n	8000ba6 <__udivmoddi4+0x9a>
 8000c6c:	f1c6 0720 	rsb	r7, r6, #32
 8000c70:	40b3      	lsls	r3, r6
 8000c72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c82:	431c      	orrs	r4, r3
 8000c84:	40f9      	lsrs	r1, r7
 8000c86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c92:	0c20      	lsrs	r0, r4, #16
 8000c94:	fa1f fe8c 	uxth.w	lr, ip
 8000c98:	fb09 1118 	mls	r1, r9, r8, r1
 8000c9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	fa02 f206 	lsl.w	r2, r2, r6
 8000caa:	d90b      	bls.n	8000cc4 <__udivmoddi4+0x1b8>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cb4:	f080 8088 	bcs.w	8000dc8 <__udivmoddi4+0x2bc>
 8000cb8:	4288      	cmp	r0, r1
 8000cba:	f240 8085 	bls.w	8000dc8 <__udivmoddi4+0x2bc>
 8000cbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000cc2:	4461      	add	r1, ip
 8000cc4:	1a09      	subs	r1, r1, r0
 8000cc6:	b2a4      	uxth	r4, r4
 8000cc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ccc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cd8:	458e      	cmp	lr, r1
 8000cda:	d908      	bls.n	8000cee <__udivmoddi4+0x1e2>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ce4:	d26c      	bcs.n	8000dc0 <__udivmoddi4+0x2b4>
 8000ce6:	458e      	cmp	lr, r1
 8000ce8:	d96a      	bls.n	8000dc0 <__udivmoddi4+0x2b4>
 8000cea:	3802      	subs	r0, #2
 8000cec:	4461      	add	r1, ip
 8000cee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cf2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cf6:	eba1 010e 	sub.w	r1, r1, lr
 8000cfa:	42a1      	cmp	r1, r4
 8000cfc:	46c8      	mov	r8, r9
 8000cfe:	46a6      	mov	lr, r4
 8000d00:	d356      	bcc.n	8000db0 <__udivmoddi4+0x2a4>
 8000d02:	d053      	beq.n	8000dac <__udivmoddi4+0x2a0>
 8000d04:	b15d      	cbz	r5, 8000d1e <__udivmoddi4+0x212>
 8000d06:	ebb3 0208 	subs.w	r2, r3, r8
 8000d0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d12:	fa22 f306 	lsr.w	r3, r2, r6
 8000d16:	40f1      	lsrs	r1, r6
 8000d18:	431f      	orrs	r7, r3
 8000d1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d1e:	2600      	movs	r6, #0
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	f1c2 0320 	rsb	r3, r2, #32
 8000d2a:	40d8      	lsrs	r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	fa21 f303 	lsr.w	r3, r1, r3
 8000d34:	4091      	lsls	r1, r2
 8000d36:	4301      	orrs	r1, r0
 8000d38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3c:	fa1f fe8c 	uxth.w	lr, ip
 8000d40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d44:	fb07 3610 	mls	r6, r7, r0, r3
 8000d48:	0c0b      	lsrs	r3, r1, #16
 8000d4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d52:	429e      	cmp	r6, r3
 8000d54:	fa04 f402 	lsl.w	r4, r4, r2
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x260>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d62:	d22f      	bcs.n	8000dc4 <__udivmoddi4+0x2b8>
 8000d64:	429e      	cmp	r6, r3
 8000d66:	d92d      	bls.n	8000dc4 <__udivmoddi4+0x2b8>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	b289      	uxth	r1, r1
 8000d70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d74:	fb07 3316 	mls	r3, r7, r6, r3
 8000d78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x28a>
 8000d84:	eb1c 0101 	adds.w	r1, ip, r1
 8000d88:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d8c:	d216      	bcs.n	8000dbc <__udivmoddi4+0x2b0>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d914      	bls.n	8000dbc <__udivmoddi4+0x2b0>
 8000d92:	3e02      	subs	r6, #2
 8000d94:	4461      	add	r1, ip
 8000d96:	1ac9      	subs	r1, r1, r3
 8000d98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d9c:	e738      	b.n	8000c10 <__udivmoddi4+0x104>
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e705      	b.n	8000bb0 <__udivmoddi4+0xa4>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e3      	b.n	8000b70 <__udivmoddi4+0x64>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6f8      	b.n	8000b9e <__udivmoddi4+0x92>
 8000dac:	454b      	cmp	r3, r9
 8000dae:	d2a9      	bcs.n	8000d04 <__udivmoddi4+0x1f8>
 8000db0:	ebb9 0802 	subs.w	r8, r9, r2
 8000db4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7a3      	b.n	8000d04 <__udivmoddi4+0x1f8>
 8000dbc:	4646      	mov	r6, r8
 8000dbe:	e7ea      	b.n	8000d96 <__udivmoddi4+0x28a>
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	e794      	b.n	8000cee <__udivmoddi4+0x1e2>
 8000dc4:	4640      	mov	r0, r8
 8000dc6:	e7d1      	b.n	8000d6c <__udivmoddi4+0x260>
 8000dc8:	46d0      	mov	r8, sl
 8000dca:	e77b      	b.n	8000cc4 <__udivmoddi4+0x1b8>
 8000dcc:	3b02      	subs	r3, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	e732      	b.n	8000c38 <__udivmoddi4+0x12c>
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	e709      	b.n	8000bea <__udivmoddi4+0xde>
 8000dd6:	4464      	add	r4, ip
 8000dd8:	3802      	subs	r0, #2
 8000dda:	e742      	b.n	8000c62 <__udivmoddi4+0x156>

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000de4:	b0d6      	sub	sp, #344	; 0x158
 8000de6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de8:	f002 f82a 	bl	8002e40 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dec:	f000 fa48 	bl	8001280 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df0:	f000 fb12 	bl	8001418 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000df4:	f000 fab0 	bl	8001358 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000df8:	f000 fae4 	bl	80013c4 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  LMX2594_HandleTypeDef lmx2594_a = LMX2594_Init_Synthesizer(&hspi1, GPIOA, GPIO_PIN_4, GPIOG, GPIO_PIN_13);
 8000dfc:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8000e00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	4bbe      	ldr	r3, [pc, #760]	; (8001100 <main+0x320>)
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	2310      	movs	r3, #16
 8000e0c:	4abd      	ldr	r2, [pc, #756]	; (8001104 <main+0x324>)
 8000e0e:	49be      	ldr	r1, [pc, #760]	; (8001108 <main+0x328>)
 8000e10:	f001 fcfe 	bl	8002810 <LMX2594_Init_Synthesizer>
  LMX2594_HandleTypeDef lmx2594_b = LMX2594_Init_Synthesizer(&hspi1, GPIOC, GPIO_PIN_4, GPIOG, GPIO_PIN_14);
 8000e14:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8000e18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	4bb8      	ldr	r3, [pc, #736]	; (8001100 <main+0x320>)
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2310      	movs	r3, #16
 8000e24:	4ab9      	ldr	r2, [pc, #740]	; (800110c <main+0x32c>)
 8000e26:	49b8      	ldr	r1, [pc, #736]	; (8001108 <main+0x328>)
 8000e28:	f001 fcf2 	bl	8002810 <LMX2594_Init_Synthesizer>
  PAIR_OF_LMX2594_HandleTypeDef pair_of_lmx2594 = { .lmx2594_a = &lmx2594_a, .lmx2594_b = &lmx2594_b };
 8000e2c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000e30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000e34:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  LMX2594_IN_PAIR_Init(&pair_of_lmx2594);
 8000e3c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 fd15 	bl	8002870 <LMX2594_IN_PAIR_Init>
  LMX2594_IN_PAIR_Out_Power(&pair_of_lmx2594, 0);
 8000e46:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 fd8f 	bl	8002970 <LMX2594_IN_PAIR_Out_Power>
  LMX2594_IN_PAIR_Chip_Power(&pair_of_lmx2594, 0);
 8000e52:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f001 fd6f 	bl	800293c <LMX2594_IN_PAIR_Chip_Power>

  while (1) {
      uint8_t number = LMX2594_COM_ReadDigit(&huart1);
 8000e5e:	48ac      	ldr	r0, [pc, #688]	; (8001110 <main+0x330>)
 8000e60:	f000 fcc7 	bl	80017f2 <LMX2594_COM_ReadDigit>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	4613      	mov	r3, r2
 8000e6a:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
      switch (number) {
 8000e6e:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8000e72:	2b05      	cmp	r3, #5
 8000e74:	f200 81f7 	bhi.w	8001266 <main+0x486>
 8000e78:	a201      	add	r2, pc, #4	; (adr r2, 8000e80 <main+0xa0>)
 8000e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7e:	bf00      	nop
 8000e80:	08000e99 	.word	0x08000e99
 8000e84:	08000fb3 	.word	0x08000fb3
 8000e88:	08000fcd 	.word	0x08000fcd
 8000e8c:	08001115 	.word	0x08001115
 8000e90:	08001235 	.word	0x08001235
 8000e94:	08001267 	.word	0x08001267
      case 0:
          LMX2594_IN_PAIR_Set_Freq(&pair_of_lmx2594, 10000000);
 8000e98:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000e9c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 80010f8 <main+0x318>
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f001 fdb5 	bl	8002a10 <LMX2594_IN_PAIR_Set_Freq>
          LMX2594_COM_WriteDouble(&huart1, lmx2594_a.fosc);
 8000ea6:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 8000eaa:	eeb0 0a47 	vmov.f32	s0, s14
 8000eae:	eef0 0a67 	vmov.f32	s1, s15
 8000eb2:	4897      	ldr	r0, [pc, #604]	; (8001110 <main+0x330>)
 8000eb4:	f000 fc7e 	bl	80017b4 <LMX2594_COM_WriteDouble>
          LMX2594_COM_WriteDigit(&huart1, lmx2594_a.ndn);
 8000eb8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	67bb      	str	r3, [r7, #120]	; 0x78
 8000ec0:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000ec2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8000ec6:	4892      	ldr	r0, [pc, #584]	; (8001110 <main+0x330>)
 8000ec8:	f000 fc55 	bl	8001776 <LMX2594_COM_WriteDigit>
          LMX2594_COM_WriteDigit(&huart1, lmx2594_a.ndnum);
 8000ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	673b      	str	r3, [r7, #112]	; 0x70
 8000ed4:	677a      	str	r2, [r7, #116]	; 0x74
 8000ed6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000eda:	488d      	ldr	r0, [pc, #564]	; (8001110 <main+0x330>)
 8000edc:	f000 fc4b 	bl	8001776 <LMX2594_COM_WriteDigit>
          LMX2594_COM_WriteDigit(&huart1, lmx2594_a.ndden);
 8000ee0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	66bb      	str	r3, [r7, #104]	; 0x68
 8000ee8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000eea:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000eee:	4888      	ldr	r0, [pc, #544]	; (8001110 <main+0x330>)
 8000ef0:	f000 fc41 	bl	8001776 <LMX2594_COM_WriteDigit>
          LMX2594_COM_WriteDouble(&huart1, lmx2594_a.fvco);
 8000ef4:	ed97 7b48 	vldr	d7, [r7, #288]	; 0x120
 8000ef8:	eeb0 0a47 	vmov.f32	s0, s14
 8000efc:	eef0 0a67 	vmov.f32	s1, s15
 8000f00:	4883      	ldr	r0, [pc, #524]	; (8001110 <main+0x330>)
 8000f02:	f000 fc57 	bl	80017b4 <LMX2594_COM_WriteDouble>
          LMX2594_COM_WriteDigit(&huart1, lmx2594_a.cd);
 8000f06:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	663b      	str	r3, [r7, #96]	; 0x60
 8000f10:	667a      	str	r2, [r7, #100]	; 0x64
 8000f12:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000f16:	487e      	ldr	r0, [pc, #504]	; (8001110 <main+0x330>)
 8000f18:	f000 fc2d 	bl	8001776 <LMX2594_COM_WriteDigit>
          LMX2594_COM_WriteDouble(&huart1, lmx2594_a.fout);
 8000f1c:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 8000f20:	eeb0 0a47 	vmov.f32	s0, s14
 8000f24:	eef0 0a67 	vmov.f32	s1, s15
 8000f28:	4879      	ldr	r0, [pc, #484]	; (8001110 <main+0x330>)
 8000f2a:	f000 fc43 	bl	80017b4 <LMX2594_COM_WriteDouble>
          LMX2594_COM_WriteDouble(&huart1, lmx2594_b.fosc);
 8000f2e:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 8000f32:	eeb0 0a47 	vmov.f32	s0, s14
 8000f36:	eef0 0a67 	vmov.f32	s1, s15
 8000f3a:	4875      	ldr	r0, [pc, #468]	; (8001110 <main+0x330>)
 8000f3c:	f000 fc3a 	bl	80017b4 <LMX2594_COM_WriteDouble>
          LMX2594_COM_WriteDigit(&huart1, lmx2594_b.ndn);
 8000f40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000f44:	2200      	movs	r2, #0
 8000f46:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f48:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000f4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000f4e:	4870      	ldr	r0, [pc, #448]	; (8001110 <main+0x330>)
 8000f50:	f000 fc11 	bl	8001776 <LMX2594_COM_WriteDigit>
          LMX2594_COM_WriteDouble(&huart1, lmx2594_b.fvco);
 8000f54:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 8000f58:	eeb0 0a47 	vmov.f32	s0, s14
 8000f5c:	eef0 0a67 	vmov.f32	s1, s15
 8000f60:	486b      	ldr	r0, [pc, #428]	; (8001110 <main+0x330>)
 8000f62:	f000 fc27 	bl	80017b4 <LMX2594_COM_WriteDouble>
          LMX2594_COM_WriteDigit(&huart1, lmx2594_b.cd);
 8000f66:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4698      	mov	r8, r3
 8000f70:	4691      	mov	r9, r2
 8000f72:	4642      	mov	r2, r8
 8000f74:	464b      	mov	r3, r9
 8000f76:	4866      	ldr	r0, [pc, #408]	; (8001110 <main+0x330>)
 8000f78:	f000 fbfd 	bl	8001776 <LMX2594_COM_WriteDigit>
          LMX2594_COM_WriteDouble(&huart1, lmx2594_b.fout);
 8000f7c:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 8000f80:	eeb0 0a47 	vmov.f32	s0, s14
 8000f84:	eef0 0a67 	vmov.f32	s1, s15
 8000f88:	4861      	ldr	r0, [pc, #388]	; (8001110 <main+0x330>)
 8000f8a:	f000 fc13 	bl	80017b4 <LMX2594_COM_WriteDouble>
          LMX2594_COM_WriteDouble(&huart1, lmx2594_a.time + lmx2594_b.time);
 8000f8e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8000f92:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8000f96:	f7ff f931 	bl	80001fc <__adddf3>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	ec43 2b17 	vmov	d7, r2, r3
 8000fa2:	eeb0 0a47 	vmov.f32	s0, s14
 8000fa6:	eef0 0a67 	vmov.f32	s1, s15
 8000faa:	4859      	ldr	r0, [pc, #356]	; (8001110 <main+0x330>)
 8000fac:	f000 fc02 	bl	80017b4 <LMX2594_COM_WriteDouble>
          break;
 8000fb0:	e159      	b.n	8001266 <main+0x486>
      case 1:
          LMX2594_IN_PAIR_Chip_Power(&pair_of_lmx2594, LMX2594_COM_ReadDigit(&huart1));
 8000fb2:	4857      	ldr	r0, [pc, #348]	; (8001110 <main+0x330>)
 8000fb4:	f000 fc1d 	bl	80017f2 <LMX2594_COM_ReadDigit>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f001 fcb9 	bl	800293c <LMX2594_IN_PAIR_Chip_Power>
          break;
 8000fca:	e14c      	b.n	8001266 <main+0x486>
      case 2:
          LMX2594_IN_PAIR_Set_Freq(&pair_of_lmx2594, LMX2594_COM_ReadDouble(&huart1));
 8000fcc:	4850      	ldr	r0, [pc, #320]	; (8001110 <main+0x330>)
 8000fce:	f000 fc36 	bl	800183e <LMX2594_COM_ReadDouble>
 8000fd2:	eeb0 7a40 	vmov.f32	s14, s0
 8000fd6:	eef0 7a60 	vmov.f32	s15, s1
 8000fda:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000fde:	eeb0 0a47 	vmov.f32	s0, s14
 8000fe2:	eef0 0a67 	vmov.f32	s1, s15
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 fd12 	bl	8002a10 <LMX2594_IN_PAIR_Set_Freq>
          LMX2594_COM_WriteDouble(&huart1, lmx2594_a.fosc);
 8000fec:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 8000ff0:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff4:	eef0 0a67 	vmov.f32	s1, s15
 8000ff8:	4845      	ldr	r0, [pc, #276]	; (8001110 <main+0x330>)
 8000ffa:	f000 fbdb 	bl	80017b4 <LMX2594_COM_WriteDouble>
          LMX2594_COM_WriteDigit(&huart1, lmx2594_a.ndn);
 8000ffe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001002:	2200      	movs	r2, #0
 8001004:	653b      	str	r3, [r7, #80]	; 0x50
 8001006:	657a      	str	r2, [r7, #84]	; 0x54
 8001008:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800100c:	4840      	ldr	r0, [pc, #256]	; (8001110 <main+0x330>)
 800100e:	f000 fbb2 	bl	8001776 <LMX2594_COM_WriteDigit>
          LMX2594_COM_WriteDigit(&huart1, lmx2594_a.ndnum);
 8001012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001016:	2200      	movs	r2, #0
 8001018:	64bb      	str	r3, [r7, #72]	; 0x48
 800101a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800101c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001020:	483b      	ldr	r0, [pc, #236]	; (8001110 <main+0x330>)
 8001022:	f000 fba8 	bl	8001776 <LMX2594_COM_WriteDigit>
          LMX2594_COM_WriteDigit(&huart1, lmx2594_a.ndden);
 8001026:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800102a:	2200      	movs	r2, #0
 800102c:	643b      	str	r3, [r7, #64]	; 0x40
 800102e:	647a      	str	r2, [r7, #68]	; 0x44
 8001030:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001034:	4836      	ldr	r0, [pc, #216]	; (8001110 <main+0x330>)
 8001036:	f000 fb9e 	bl	8001776 <LMX2594_COM_WriteDigit>
          LMX2594_COM_WriteDouble(&huart1, lmx2594_a.fvco);
 800103a:	ed97 7b48 	vldr	d7, [r7, #288]	; 0x120
 800103e:	eeb0 0a47 	vmov.f32	s0, s14
 8001042:	eef0 0a67 	vmov.f32	s1, s15
 8001046:	4832      	ldr	r0, [pc, #200]	; (8001110 <main+0x330>)
 8001048:	f000 fbb4 	bl	80017b4 <LMX2594_COM_WriteDouble>
          LMX2594_COM_WriteDigit(&huart1, lmx2594_a.cd);
 800104c:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 8001050:	b29b      	uxth	r3, r3
 8001052:	2200      	movs	r2, #0
 8001054:	63bb      	str	r3, [r7, #56]	; 0x38
 8001056:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001058:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800105c:	482c      	ldr	r0, [pc, #176]	; (8001110 <main+0x330>)
 800105e:	f000 fb8a 	bl	8001776 <LMX2594_COM_WriteDigit>
          LMX2594_COM_WriteDouble(&huart1, lmx2594_a.fout);
 8001062:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 8001066:	eeb0 0a47 	vmov.f32	s0, s14
 800106a:	eef0 0a67 	vmov.f32	s1, s15
 800106e:	4828      	ldr	r0, [pc, #160]	; (8001110 <main+0x330>)
 8001070:	f000 fba0 	bl	80017b4 <LMX2594_COM_WriteDouble>
          LMX2594_COM_WriteDouble(&huart1, lmx2594_b.fosc);
 8001074:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 8001078:	eeb0 0a47 	vmov.f32	s0, s14
 800107c:	eef0 0a67 	vmov.f32	s1, s15
 8001080:	4823      	ldr	r0, [pc, #140]	; (8001110 <main+0x330>)
 8001082:	f000 fb97 	bl	80017b4 <LMX2594_COM_WriteDouble>
          LMX2594_COM_WriteDigit(&huart1, lmx2594_b.ndn);
 8001086:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800108a:	2200      	movs	r2, #0
 800108c:	633b      	str	r3, [r7, #48]	; 0x30
 800108e:	637a      	str	r2, [r7, #52]	; 0x34
 8001090:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001094:	481e      	ldr	r0, [pc, #120]	; (8001110 <main+0x330>)
 8001096:	f000 fb6e 	bl	8001776 <LMX2594_COM_WriteDigit>
          LMX2594_COM_WriteDouble(&huart1, lmx2594_b.fvco);
 800109a:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 800109e:	eeb0 0a47 	vmov.f32	s0, s14
 80010a2:	eef0 0a67 	vmov.f32	s1, s15
 80010a6:	481a      	ldr	r0, [pc, #104]	; (8001110 <main+0x330>)
 80010a8:	f000 fb84 	bl	80017b4 <LMX2594_COM_WriteDouble>
          LMX2594_COM_WriteDigit(&huart1, lmx2594_b.cd);
 80010ac:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	2200      	movs	r2, #0
 80010b4:	469a      	mov	sl, r3
 80010b6:	4693      	mov	fp, r2
 80010b8:	4652      	mov	r2, sl
 80010ba:	465b      	mov	r3, fp
 80010bc:	4814      	ldr	r0, [pc, #80]	; (8001110 <main+0x330>)
 80010be:	f000 fb5a 	bl	8001776 <LMX2594_COM_WriteDigit>
          LMX2594_COM_WriteDouble(&huart1, lmx2594_b.fout);
 80010c2:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 80010c6:	eeb0 0a47 	vmov.f32	s0, s14
 80010ca:	eef0 0a67 	vmov.f32	s1, s15
 80010ce:	4810      	ldr	r0, [pc, #64]	; (8001110 <main+0x330>)
 80010d0:	f000 fb70 	bl	80017b4 <LMX2594_COM_WriteDouble>
          LMX2594_COM_WriteDouble(&huart1, lmx2594_a.time + lmx2594_b.time);
 80010d4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80010d8:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80010dc:	f7ff f88e 	bl	80001fc <__adddf3>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	ec43 2b17 	vmov	d7, r2, r3
 80010e8:	eeb0 0a47 	vmov.f32	s0, s14
 80010ec:	eef0 0a67 	vmov.f32	s1, s15
 80010f0:	4807      	ldr	r0, [pc, #28]	; (8001110 <main+0x330>)
 80010f2:	f000 fb5f 	bl	80017b4 <LMX2594_COM_WriteDouble>
          break;
 80010f6:	e0b6      	b.n	8001266 <main+0x486>
 80010f8:	00000000 	.word	0x00000000
 80010fc:	416312d0 	.word	0x416312d0
 8001100:	40021800 	.word	0x40021800
 8001104:	40020000 	.word	0x40020000
 8001108:	2000010c 	.word	0x2000010c
 800110c:	40020800 	.word	0x40020800
 8001110:	20000164 	.word	0x20000164
      case 3:
    	  LMX2594_COM_ReadDigit(&huart1);
 8001114:	4859      	ldr	r0, [pc, #356]	; (800127c <main+0x49c>)
 8001116:	f000 fb6c 	bl	80017f2 <LMX2594_COM_ReadDigit>
    	  LMX2594_COM_WriteDigit(&huart1, 1);
 800111a:	f04f 0201 	mov.w	r2, #1
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	4856      	ldr	r0, [pc, #344]	; (800127c <main+0x49c>)
 8001124:	f000 fb27 	bl	8001776 <LMX2594_COM_WriteDigit>
          LMX2594_COM_WriteDouble(&huart1, lmx2594_a.fosc);
 8001128:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 800112c:	eeb0 0a47 	vmov.f32	s0, s14
 8001130:	eef0 0a67 	vmov.f32	s1, s15
 8001134:	4851      	ldr	r0, [pc, #324]	; (800127c <main+0x49c>)
 8001136:	f000 fb3d 	bl	80017b4 <LMX2594_COM_WriteDouble>
          LMX2594_COM_WriteDigit(&huart1, lmx2594_a.ndn);
 800113a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800113e:	2200      	movs	r2, #0
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
 8001142:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001144:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001148:	484c      	ldr	r0, [pc, #304]	; (800127c <main+0x49c>)
 800114a:	f000 fb14 	bl	8001776 <LMX2594_COM_WriteDigit>
          LMX2594_COM_WriteDigit(&huart1, lmx2594_a.ndnum);
 800114e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001152:	2200      	movs	r2, #0
 8001154:	623b      	str	r3, [r7, #32]
 8001156:	627a      	str	r2, [r7, #36]	; 0x24
 8001158:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800115c:	4847      	ldr	r0, [pc, #284]	; (800127c <main+0x49c>)
 800115e:	f000 fb0a 	bl	8001776 <LMX2594_COM_WriteDigit>
          LMX2594_COM_WriteDigit(&huart1, lmx2594_a.ndden);
 8001162:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001166:	2200      	movs	r2, #0
 8001168:	61bb      	str	r3, [r7, #24]
 800116a:	61fa      	str	r2, [r7, #28]
 800116c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001170:	4842      	ldr	r0, [pc, #264]	; (800127c <main+0x49c>)
 8001172:	f000 fb00 	bl	8001776 <LMX2594_COM_WriteDigit>
          LMX2594_COM_WriteDouble(&huart1, lmx2594_a.fvco);
 8001176:	ed97 7b48 	vldr	d7, [r7, #288]	; 0x120
 800117a:	eeb0 0a47 	vmov.f32	s0, s14
 800117e:	eef0 0a67 	vmov.f32	s1, s15
 8001182:	483e      	ldr	r0, [pc, #248]	; (800127c <main+0x49c>)
 8001184:	f000 fb16 	bl	80017b4 <LMX2594_COM_WriteDouble>
          LMX2594_COM_WriteDigit(&huart1, lmx2594_a.cd);
 8001188:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 800118c:	b29b      	uxth	r3, r3
 800118e:	2200      	movs	r2, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	617a      	str	r2, [r7, #20]
 8001194:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001198:	4838      	ldr	r0, [pc, #224]	; (800127c <main+0x49c>)
 800119a:	f000 faec 	bl	8001776 <LMX2594_COM_WriteDigit>
          LMX2594_COM_WriteDouble(&huart1, lmx2594_a.fout);
 800119e:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 80011a2:	eeb0 0a47 	vmov.f32	s0, s14
 80011a6:	eef0 0a67 	vmov.f32	s1, s15
 80011aa:	4834      	ldr	r0, [pc, #208]	; (800127c <main+0x49c>)
 80011ac:	f000 fb02 	bl	80017b4 <LMX2594_COM_WriteDouble>
          LMX2594_COM_WriteDouble(&huart1, lmx2594_b.fosc);
 80011b0:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 80011b4:	eeb0 0a47 	vmov.f32	s0, s14
 80011b8:	eef0 0a67 	vmov.f32	s1, s15
 80011bc:	482f      	ldr	r0, [pc, #188]	; (800127c <main+0x49c>)
 80011be:	f000 faf9 	bl	80017b4 <LMX2594_COM_WriteDouble>
          LMX2594_COM_WriteDigit(&huart1, lmx2594_b.ndn);
 80011c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80011c6:	2200      	movs	r2, #0
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	60fa      	str	r2, [r7, #12]
 80011cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011d0:	482a      	ldr	r0, [pc, #168]	; (800127c <main+0x49c>)
 80011d2:	f000 fad0 	bl	8001776 <LMX2594_COM_WriteDigit>
          LMX2594_COM_WriteDouble(&huart1, lmx2594_b.fvco);
 80011d6:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 80011da:	eeb0 0a47 	vmov.f32	s0, s14
 80011de:	eef0 0a67 	vmov.f32	s1, s15
 80011e2:	4826      	ldr	r0, [pc, #152]	; (800127c <main+0x49c>)
 80011e4:	f000 fae6 	bl	80017b4 <LMX2594_COM_WriteDouble>
          LMX2594_COM_WriteDigit(&huart1, lmx2594_b.cd);
 80011e8:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	2200      	movs	r2, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011f8:	4820      	ldr	r0, [pc, #128]	; (800127c <main+0x49c>)
 80011fa:	f000 fabc 	bl	8001776 <LMX2594_COM_WriteDigit>
          LMX2594_COM_WriteDouble(&huart1, lmx2594_b.fout);
 80011fe:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 8001202:	eeb0 0a47 	vmov.f32	s0, s14
 8001206:	eef0 0a67 	vmov.f32	s1, s15
 800120a:	481c      	ldr	r0, [pc, #112]	; (800127c <main+0x49c>)
 800120c:	f000 fad2 	bl	80017b4 <LMX2594_COM_WriteDouble>
          LMX2594_COM_WriteDouble(&huart1, lmx2594_a.time + lmx2594_b.time);
 8001210:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001214:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001218:	f7fe fff0 	bl	80001fc <__adddf3>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	ec43 2b17 	vmov	d7, r2, r3
 8001224:	eeb0 0a47 	vmov.f32	s0, s14
 8001228:	eef0 0a67 	vmov.f32	s1, s15
 800122c:	4813      	ldr	r0, [pc, #76]	; (800127c <main+0x49c>)
 800122e:	f000 fac1 	bl	80017b4 <LMX2594_COM_WriteDouble>
    	  break;
 8001232:	e018      	b.n	8001266 <main+0x486>
      case 4:
    	  LMX2594_IN_PAIR_Out_Power(&pair_of_lmx2594, LMX2594_COM_ReadDigit(&huart1));
 8001234:	4811      	ldr	r0, [pc, #68]	; (800127c <main+0x49c>)
 8001236:	f000 fadc 	bl	80017f2 <LMX2594_COM_ReadDigit>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001244:	4611      	mov	r1, r2
 8001246:	4618      	mov	r0, r3
 8001248:	f001 fb92 	bl	8002970 <LMX2594_IN_PAIR_Out_Power>
    	  LMX2594_CONTROL_OUTA_POWER(pair_of_lmx2594.lmx2594_b, 1);
 800124c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001250:	2101      	movs	r1, #1
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fd06 	bl	8001c64 <LMX2594_CONTROL_OUTA_POWER>
    	  LMX2594_CONTROL_OUTB_POWER(pair_of_lmx2594.lmx2594_b, 0);
 8001258:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f000 fd30 	bl	8001cc4 <LMX2594_CONTROL_OUTB_POWER>
    	  break;
 8001264:	bf00      	nop
      case 5:
          break;
      }
      LMX2594_COM_WriteDigit(&huart1, number);
 8001266:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 800126a:	2200      	movs	r2, #0
 800126c:	461c      	mov	r4, r3
 800126e:	4615      	mov	r5, r2
 8001270:	4622      	mov	r2, r4
 8001272:	462b      	mov	r3, r5
 8001274:	4801      	ldr	r0, [pc, #4]	; (800127c <main+0x49c>)
 8001276:	f000 fa7e 	bl	8001776 <LMX2594_COM_WriteDigit>
  while (1) {
 800127a:	e5f0      	b.n	8000e5e <main+0x7e>
 800127c:	20000164 	.word	0x20000164

08001280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b094      	sub	sp, #80	; 0x50
 8001284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	2230      	movs	r2, #48	; 0x30
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f003 fe54 	bl	8004f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	4b29      	ldr	r3, [pc, #164]	; (8001350 <SystemClock_Config+0xd0>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	4a28      	ldr	r2, [pc, #160]	; (8001350 <SystemClock_Config+0xd0>)
 80012ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b2:	6413      	str	r3, [r2, #64]	; 0x40
 80012b4:	4b26      	ldr	r3, [pc, #152]	; (8001350 <SystemClock_Config+0xd0>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012c0:	2300      	movs	r3, #0
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	4b23      	ldr	r3, [pc, #140]	; (8001354 <SystemClock_Config+0xd4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012cc:	4a21      	ldr	r2, [pc, #132]	; (8001354 <SystemClock_Config+0xd4>)
 80012ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <SystemClock_Config+0xd4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e0:	2302      	movs	r3, #2
 80012e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e4:	2301      	movs	r3, #1
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e8:	2310      	movs	r3, #16
 80012ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ec:	2302      	movs	r3, #2
 80012ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012f0:	2300      	movs	r3, #0
 80012f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012f4:	2308      	movs	r3, #8
 80012f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80012f8:	2332      	movs	r3, #50	; 0x32
 80012fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012fc:	2304      	movs	r3, #4
 80012fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001300:	2307      	movs	r3, #7
 8001302:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001304:	f107 0320 	add.w	r3, r7, #32
 8001308:	4618      	mov	r0, r3
 800130a:	f002 f8b7 	bl	800347c <HAL_RCC_OscConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001314:	f000 f90a 	bl	800152c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001318:	230f      	movs	r3, #15
 800131a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131c:	2302      	movs	r3, #2
 800131e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001324:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001328:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800132a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800132e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f002 fb18 	bl	800396c <HAL_RCC_ClockConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001342:	f000 f8f3 	bl	800152c <Error_Handler>
  }
}
 8001346:	bf00      	nop
 8001348:	3750      	adds	r7, #80	; 0x50
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40007000 	.word	0x40007000

08001358 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <MX_SPI1_Init+0x64>)
 800135e:	4a18      	ldr	r2, [pc, #96]	; (80013c0 <MX_SPI1_Init+0x68>)
 8001360:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <MX_SPI1_Init+0x64>)
 8001364:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001368:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <MX_SPI1_Init+0x64>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <MX_SPI1_Init+0x64>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_SPI1_Init+0x64>)
 8001378:	2202      	movs	r2, #2
 800137a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_SPI1_Init+0x64>)
 800137e:	2201      	movs	r2, #1
 8001380:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_SPI1_Init+0x64>)
 8001384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001388:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <MX_SPI1_Init+0x64>)
 800138c:	2208      	movs	r2, #8
 800138e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <MX_SPI1_Init+0x64>)
 8001392:	2200      	movs	r2, #0
 8001394:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <MX_SPI1_Init+0x64>)
 8001398:	2200      	movs	r2, #0
 800139a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <MX_SPI1_Init+0x64>)
 800139e:	2200      	movs	r2, #0
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_SPI1_Init+0x64>)
 80013a4:	220a      	movs	r2, #10
 80013a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013a8:	4804      	ldr	r0, [pc, #16]	; (80013bc <MX_SPI1_Init+0x64>)
 80013aa:	f002 fcff 	bl	8003dac <HAL_SPI_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013b4:	f000 f8ba 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	2000010c 	.word	0x2000010c
 80013c0:	40013000 	.word	0x40013000

080013c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <MX_USART1_UART_Init+0x50>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013ec:	220c      	movs	r2, #12
 80013ee:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013fe:	f003 f907 	bl	8004610 <HAL_UART_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8001408:	f000 f890 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000164 	.word	0x20000164
 8001414:	40011000 	.word	0x40011000

08001418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	4b3a      	ldr	r3, [pc, #232]	; (800151c <MX_GPIO_Init+0x104>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a39      	ldr	r2, [pc, #228]	; (800151c <MX_GPIO_Init+0x104>)
 8001438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b37      	ldr	r3, [pc, #220]	; (800151c <MX_GPIO_Init+0x104>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b33      	ldr	r3, [pc, #204]	; (800151c <MX_GPIO_Init+0x104>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a32      	ldr	r2, [pc, #200]	; (800151c <MX_GPIO_Init+0x104>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b30      	ldr	r3, [pc, #192]	; (800151c <MX_GPIO_Init+0x104>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	4b2c      	ldr	r3, [pc, #176]	; (800151c <MX_GPIO_Init+0x104>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a2b      	ldr	r2, [pc, #172]	; (800151c <MX_GPIO_Init+0x104>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b29      	ldr	r3, [pc, #164]	; (800151c <MX_GPIO_Init+0x104>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b25      	ldr	r3, [pc, #148]	; (800151c <MX_GPIO_Init+0x104>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a24      	ldr	r2, [pc, #144]	; (800151c <MX_GPIO_Init+0x104>)
 800148c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b22      	ldr	r3, [pc, #136]	; (800151c <MX_GPIO_Init+0x104>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800149e:	2201      	movs	r2, #1
 80014a0:	2110      	movs	r1, #16
 80014a2:	481f      	ldr	r0, [pc, #124]	; (8001520 <MX_GPIO_Init+0x108>)
 80014a4:	f001 ffd0 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	2110      	movs	r1, #16
 80014ac:	481d      	ldr	r0, [pc, #116]	; (8001524 <MX_GPIO_Init+0x10c>)
 80014ae:	f001 ffcb 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80014b8:	481b      	ldr	r0, [pc, #108]	; (8001528 <MX_GPIO_Init+0x110>)
 80014ba:	f001 ffc5 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014be:	2310      	movs	r3, #16
 80014c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4812      	ldr	r0, [pc, #72]	; (8001520 <MX_GPIO_Init+0x108>)
 80014d6:	f001 fe0b 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014da:	2310      	movs	r3, #16
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014de:	2301      	movs	r3, #1
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <MX_GPIO_Init+0x10c>)
 80014f2:	f001 fdfd 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80014f6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	4806      	ldr	r0, [pc, #24]	; (8001528 <MX_GPIO_Init+0x110>)
 8001510:	f001 fdee 	bl	80030f0 <HAL_GPIO_Init>

}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	; 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	40020000 	.word	0x40020000
 8001524:	40020800 	.word	0x40020800
 8001528:	40021800 	.word	0x40021800

0800152c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <HAL_MspInit+0x4c>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <HAL_MspInit+0x4c>)
 800154c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001550:	6453      	str	r3, [r2, #68]	; 0x44
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <HAL_MspInit+0x4c>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_MspInit+0x4c>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a08      	ldr	r2, [pc, #32]	; (8001588 <HAL_MspInit+0x4c>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_MspInit+0x4c>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800157a:	2007      	movs	r0, #7
 800157c:	f001 fd84 	bl	8003088 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40023800 	.word	0x40023800

0800158c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a19      	ldr	r2, [pc, #100]	; (8001610 <HAL_SPI_MspInit+0x84>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d12b      	bne.n	8001606 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <HAL_SPI_MspInit+0x88>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	4a17      	ldr	r2, [pc, #92]	; (8001614 <HAL_SPI_MspInit+0x88>)
 80015b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015bc:	6453      	str	r3, [r2, #68]	; 0x44
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_SPI_MspInit+0x88>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <HAL_SPI_MspInit+0x88>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a10      	ldr	r2, [pc, #64]	; (8001614 <HAL_SPI_MspInit+0x88>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <HAL_SPI_MspInit+0x88>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015e6:	23e0      	movs	r3, #224	; 0xe0
 80015e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015f6:	2305      	movs	r3, #5
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	4805      	ldr	r0, [pc, #20]	; (8001618 <HAL_SPI_MspInit+0x8c>)
 8001602:	f001 fd75 	bl	80030f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001606:	bf00      	nop
 8001608:	3728      	adds	r7, #40	; 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40013000 	.word	0x40013000
 8001614:	40023800 	.word	0x40023800
 8001618:	40020000 	.word	0x40020000

0800161c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a19      	ldr	r2, [pc, #100]	; (80016a0 <HAL_UART_MspInit+0x84>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d12c      	bne.n	8001698 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_UART_MspInit+0x88>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <HAL_UART_MspInit+0x88>)
 8001648:	f043 0310 	orr.w	r3, r3, #16
 800164c:	6453      	str	r3, [r2, #68]	; 0x44
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_UART_MspInit+0x88>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_UART_MspInit+0x88>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a10      	ldr	r2, [pc, #64]	; (80016a4 <HAL_UART_MspInit+0x88>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_UART_MspInit+0x88>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001676:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800167a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001688:	2307      	movs	r3, #7
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <HAL_UART_MspInit+0x8c>)
 8001694:	f001 fd2c 	bl	80030f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001698:	bf00      	nop
 800169a:	3728      	adds	r7, #40	; 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40011000 	.word	0x40011000
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020000 	.word	0x40020000

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <NMI_Handler+0x4>

080016b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <MemManage_Handler+0x4>

080016be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <BusFault_Handler+0x4>

080016c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <UsageFault_Handler+0x4>

080016ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f8:	f001 fbf4 	bl	8002ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <SystemInit+0x20>)
 8001706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <SystemInit+0x20>)
 800170c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800175c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001728:	480d      	ldr	r0, [pc, #52]	; (8001760 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800172a:	490e      	ldr	r1, [pc, #56]	; (8001764 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800172c:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001730:	e002      	b.n	8001738 <LoopCopyDataInit>

08001732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001736:	3304      	adds	r3, #4

08001738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800173c:	d3f9      	bcc.n	8001732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001740:	4c0b      	ldr	r4, [pc, #44]	; (8001770 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001744:	e001      	b.n	800174a <LoopFillZerobss>

08001746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001748:	3204      	adds	r2, #4

0800174a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800174c:	d3fb      	bcc.n	8001746 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800174e:	f7ff ffd7 	bl	8001700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001752:	f003 fbc1 	bl	8004ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001756:	f7ff fb43 	bl	8000de0 <main>
  bx  lr    
 800175a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800175c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001764:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8001768:	08005144 	.word	0x08005144
  ldr r2, =_sbss
 800176c:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8001770:	200001ac 	.word	0x200001ac

08001774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001774:	e7fe      	b.n	8001774 <ADC_IRQHandler>

08001776 <LMX2594_COM_WriteDigit>:
#include "lmx2594_com_control.h"

void LMX2594_COM_WriteDigit(UART_HandleTypeDef* huart, uint64_t writingdata) {
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	60f8      	str	r0, [r7, #12]
 800177e:	e9c7 2300 	strd	r2, r3, [r7]
    uint8_t* bytePointer = (uint8_t*)&writingdata;
 8001782:	463b      	mov	r3, r7
 8001784:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < 8; i++) HAL_UART_Transmit(huart, &bytePointer[i], 1, 0xFFFF);
 8001786:	2300      	movs	r3, #0
 8001788:	75fb      	strb	r3, [r7, #23]
 800178a:	e00b      	b.n	80017a4 <LMX2594_COM_WriteDigit+0x2e>
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	18d1      	adds	r1, r2, r3
 8001792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001796:	2201      	movs	r2, #1
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f002 ff86 	bl	80046aa <HAL_UART_Transmit>
 800179e:	7dfb      	ldrb	r3, [r7, #23]
 80017a0:	3301      	adds	r3, #1
 80017a2:	75fb      	strb	r3, [r7, #23]
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
 80017a6:	2b07      	cmp	r3, #7
 80017a8:	d9f0      	bls.n	800178c <LMX2594_COM_WriteDigit+0x16>
}
 80017aa:	bf00      	nop
 80017ac:	bf00      	nop
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <LMX2594_COM_WriteDouble>:
void LMX2594_COM_WriteDouble(UART_HandleTypeDef* huart, double writingdata) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	ed87 0b00 	vstr	d0, [r7]
    uint8_t* bytePointer = (uint8_t*)&writingdata;
 80017c0:	463b      	mov	r3, r7
 80017c2:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < 8; i++) HAL_UART_Transmit(huart, &bytePointer[i], 1, 0xFFFF);
 80017c4:	2300      	movs	r3, #0
 80017c6:	75fb      	strb	r3, [r7, #23]
 80017c8:	e00b      	b.n	80017e2 <LMX2594_COM_WriteDouble+0x2e>
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	18d1      	adds	r1, r2, r3
 80017d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d4:	2201      	movs	r2, #1
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f002 ff67 	bl	80046aa <HAL_UART_Transmit>
 80017dc:	7dfb      	ldrb	r3, [r7, #23]
 80017de:	3301      	adds	r3, #1
 80017e0:	75fb      	strb	r3, [r7, #23]
 80017e2:	7dfb      	ldrb	r3, [r7, #23]
 80017e4:	2b07      	cmp	r3, #7
 80017e6:	d9f0      	bls.n	80017ca <LMX2594_COM_WriteDouble+0x16>
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <LMX2594_COM_ReadDigit>:

uint64_t LMX2594_COM_ReadDigit(UART_HandleTypeDef* huart) {
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
    uint64_t readingdata = 0;
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	e9c7 2302 	strd	r2, r3, [r7, #8]
    uint8_t* bytePointer = (uint8_t*)&readingdata;
 8001806:	f107 0308 	add.w	r3, r7, #8
 800180a:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < 8; i++) HAL_UART_Receive(huart, &bytePointer[i], 1, 0xFFFF);
 800180c:	2300      	movs	r3, #0
 800180e:	75fb      	strb	r3, [r7, #23]
 8001810:	e00b      	b.n	800182a <LMX2594_COM_ReadDigit+0x38>
 8001812:	7dfb      	ldrb	r3, [r7, #23]
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	18d1      	adds	r1, r2, r3
 8001818:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800181c:	2201      	movs	r2, #1
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f002 ffd5 	bl	80047ce <HAL_UART_Receive>
 8001824:	7dfb      	ldrb	r3, [r7, #23]
 8001826:	3301      	adds	r3, #1
 8001828:	75fb      	strb	r3, [r7, #23]
 800182a:	7dfb      	ldrb	r3, [r7, #23]
 800182c:	2b07      	cmp	r3, #7
 800182e:	d9f0      	bls.n	8001812 <LMX2594_COM_ReadDigit+0x20>
    return readingdata;
 8001830:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <LMX2594_COM_ReadDouble>:
double LMX2594_COM_ReadDouble(UART_HandleTypeDef* huart) {
 800183e:	b580      	push	{r7, lr}
 8001840:	b086      	sub	sp, #24
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
    double readingdata = 0;
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    uint8_t* bytePointer = (uint8_t*)&readingdata;
 8001852:	f107 0308 	add.w	r3, r7, #8
 8001856:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < 8; i++) HAL_UART_Receive(huart, &bytePointer[i], 1, 0xFFFF);
 8001858:	2300      	movs	r3, #0
 800185a:	75fb      	strb	r3, [r7, #23]
 800185c:	e00b      	b.n	8001876 <LMX2594_COM_ReadDouble+0x38>
 800185e:	7dfb      	ldrb	r3, [r7, #23]
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	18d1      	adds	r1, r2, r3
 8001864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001868:	2201      	movs	r2, #1
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f002 ffaf 	bl	80047ce <HAL_UART_Receive>
 8001870:	7dfb      	ldrb	r3, [r7, #23]
 8001872:	3301      	adds	r3, #1
 8001874:	75fb      	strb	r3, [r7, #23]
 8001876:	7dfb      	ldrb	r3, [r7, #23]
 8001878:	2b07      	cmp	r3, #7
 800187a:	d9f0      	bls.n	800185e <LMX2594_COM_ReadDouble+0x20>
    return readingdata;
 800187c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001880:	ec43 2b17 	vmov	d7, r2, r3
}
 8001884:	eeb0 0a47 	vmov.f32	s0, s14
 8001888:	eef0 0a67 	vmov.f32	s1, s15
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <LMX2594_WriteParameter>:
#include "lmx2594_parameters_control.h"

void LMX2594_WriteParameter(LMX2594_SPI_HandleTypeDef* lmx2594_hspi, paramdata_t* parameter, uint64_t value) {
 8001892:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001896:	b08b      	sub	sp, #44	; 0x2c
 8001898:	af00      	add	r7, sp, #0
 800189a:	61f8      	str	r0, [r7, #28]
 800189c:	61b9      	str	r1, [r7, #24]
 800189e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    uint8_t valueshift;
    uint16_t mask;
    uint8_t j;
    for (uint8_t i = 0; i <= 2; i++) {
 80018a2:	2300      	movs	r3, #0
 80018a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80018a8:	e0cc      	b.n	8001a44 <LMX2594_WriteParameter+0x1b2>
        if (parameter->data[i].width) {
 80018aa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80018ae:	69b9      	ldr	r1, [r7, #24]
 80018b0:	4613      	mov	r3, r2
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4413      	add	r3, r2
 80018b6:	440b      	add	r3, r1
 80018b8:	789b      	ldrb	r3, [r3, #2]
 80018ba:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80ba 	beq.w	8001a3a <LMX2594_WriteParameter+0x1a8>
            mask = 0; for (j = 1; j <= parameter->data[i].width; j++) { mask = (mask << 1) | 1; }
 80018c6:	2300      	movs	r3, #0
 80018c8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80018ca:	2301      	movs	r3, #1
 80018cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80018d0:	e00b      	b.n	80018ea <LMX2594_WriteParameter+0x58>
 80018d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	b21b      	sxth	r3, r3
 80018de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80018e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018e4:	3301      	adds	r3, #1
 80018e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80018ea:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	440b      	add	r3, r1
 80018f8:	789b      	ldrb	r3, [r3, #2]
 80018fa:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001906:	4293      	cmp	r3, r2
 8001908:	d9e3      	bls.n	80018d2 <LMX2594_WriteParameter+0x40>
            valueshift = 0; for (j = i + 1; j <= 2; j++) { valueshift = valueshift + parameter->data[j].width; }
 800190a:	2300      	movs	r3, #0
 800190c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001910:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001914:	3301      	adds	r3, #1
 8001916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800191a:	e015      	b.n	8001948 <LMX2594_WriteParameter+0xb6>
 800191c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001920:	69b9      	ldr	r1, [r7, #24]
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	440b      	add	r3, r1
 800192a:	789b      	ldrb	r3, [r3, #2]
 800192c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001930:	b2db      	uxtb	r3, r3
 8001932:	461a      	mov	r2, r3
 8001934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001938:	4413      	add	r3, r2
 800193a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800193e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001942:	3301      	adds	r3, #1
 8001944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001948:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800194c:	2b02      	cmp	r3, #2
 800194e:	d9e5      	bls.n	800191c <LMX2594_WriteParameter+0x8a>
            LMX2594_WriteRegister(lmx2594_hspi, parameter->data[i].regnumber,
 8001950:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001954:	69b9      	ldr	r1, [r7, #24]
 8001956:	4613      	mov	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	440b      	add	r3, r1
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001964:	b2db      	uxtb	r3, r3
 8001966:	607b      	str	r3, [r7, #4]
                (LMX2594_ReadRegister(lmx2594_hspi, parameter->data[i].regnumber) &
 8001968:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800196c:	69b9      	ldr	r1, [r7, #24]
 800196e:	4613      	mov	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	440b      	add	r3, r1
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800197c:	b2db      	uxtb	r3, r3
 800197e:	4619      	mov	r1, r3
 8001980:	69f8      	ldr	r0, [r7, #28]
 8001982:	f000 f938 	bl	8001bf6 <LMX2594_ReadRegister>
 8001986:	4603      	mov	r3, r0
 8001988:	b219      	sxth	r1, r3
                    ~(mask << parameter->data[i].shift)) |
 800198a:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800198c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001990:	69be      	ldr	r6, [r7, #24]
 8001992:	4613      	mov	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4413      	add	r3, r2
 8001998:	4433      	add	r3, r6
 800199a:	785b      	ldrb	r3, [r3, #1]
 800199c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	fa00 f303 	lsl.w	r3, r0, r3
                (LMX2594_ReadRegister(lmx2594_hspi, parameter->data[i].regnumber) &
 80019a6:	b21b      	sxth	r3, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	400b      	ands	r3, r1
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	fa1f fc83 	uxth.w	ip, r3
                (((value >> valueshift) & mask) << parameter->data[i].shift)
 80019b4:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 80019b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019bc:	f1c0 0620 	rsb	r6, r0, #32
 80019c0:	f1a0 0120 	sub.w	r1, r0, #32
 80019c4:	fa22 f400 	lsr.w	r4, r2, r0
 80019c8:	fa03 f606 	lsl.w	r6, r3, r6
 80019cc:	4334      	orrs	r4, r6
 80019ce:	fa23 f101 	lsr.w	r1, r3, r1
 80019d2:	430c      	orrs	r4, r1
 80019d4:	fa23 f500 	lsr.w	r5, r3, r0
 80019d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019da:	2200      	movs	r2, #0
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	60fa      	str	r2, [r7, #12]
 80019e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019e4:	4602      	mov	r2, r0
 80019e6:	ea04 0a02 	and.w	sl, r4, r2
 80019ea:	460a      	mov	r2, r1
 80019ec:	ea05 0b02 	and.w	fp, r5, r2
 80019f0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80019f4:	69b9      	ldr	r1, [r7, #24]
 80019f6:	4613      	mov	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	440b      	add	r3, r1
 80019fe:	785b      	ldrb	r3, [r3, #1]
 8001a00:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	f1a3 0120 	sub.w	r1, r3, #32
 8001a0a:	f1c3 0220 	rsb	r2, r3, #32
 8001a0e:	fa0b f903 	lsl.w	r9, fp, r3
 8001a12:	fa0a f101 	lsl.w	r1, sl, r1
 8001a16:	ea49 0901 	orr.w	r9, r9, r1
 8001a1a:	fa2a f202 	lsr.w	r2, sl, r2
 8001a1e:	ea49 0902 	orr.w	r9, r9, r2
 8001a22:	fa0a f803 	lsl.w	r8, sl, r3
            LMX2594_WriteRegister(lmx2594_hspi, parameter->data[i].regnumber,
 8001a26:	fa1f f388 	uxth.w	r3, r8
 8001a2a:	ea4c 0303 	orr.w	r3, ip, r3
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	69f8      	ldr	r0, [r7, #28]
 8001a36:	f000 f8ad 	bl	8001b94 <LMX2594_WriteRegister>
    for (uint8_t i = 0; i <= 2; i++) {
 8001a3a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a3e:	3301      	adds	r3, #1
 8001a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001a44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	f67f af2e 	bls.w	80018aa <LMX2594_WriteParameter+0x18>
            );
        }
    }
}
 8001a4e:	bf00      	nop
 8001a50:	bf00      	nop
 8001a52:	372c      	adds	r7, #44	; 0x2c
 8001a54:	46bd      	mov	sp, r7
 8001a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001a5a <LMX2594_ReadParameter>:

uint64_t LMX2594_ReadParameter(LMX2594_SPI_HandleTypeDef* lmx2594_hspi, paramdata_t* parameter) {
 8001a5a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6178      	str	r0, [r7, #20]
 8001a64:	6139      	str	r1, [r7, #16]
    uint16_t valuearray[3] = { 0, 0, 0 };
 8001a66:	2300      	movs	r3, #0
 8001a68:	83bb      	strh	r3, [r7, #28]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	83fb      	strh	r3, [r7, #30]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	843b      	strh	r3, [r7, #32]
    uint16_t mask;
    uint8_t j;
    for (uint8_t i = 0; i <= 2; i++) {
 8001a72:	2300      	movs	r3, #0
 8001a74:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001a78:	e060      	b.n	8001b3c <LMX2594_ReadParameter+0xe2>
        if (parameter->data[i].width) {
 8001a7a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a7e:	6939      	ldr	r1, [r7, #16]
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	789b      	ldrb	r3, [r3, #2]
 8001a8a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d04e      	beq.n	8001b32 <LMX2594_ReadParameter+0xd8>
            mask = 0; for (j = 1; j <= parameter->data[i].width; j++) { mask = (mask << 1) | 1; }
 8001a94:	2300      	movs	r3, #0
 8001a96:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a98:	2301      	movs	r3, #1
 8001a9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001a9e:	e00b      	b.n	8001ab8 <LMX2594_ReadParameter+0x5e>
 8001aa0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	b21b      	sxth	r3, r3
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001aae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001ab8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001abc:	6939      	ldr	r1, [r7, #16]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	789b      	ldrb	r3, [r3, #2]
 8001ac8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d9e3      	bls.n	8001aa0 <LMX2594_ReadParameter+0x46>
            valuearray[i] = (LMX2594_ReadRegister(lmx2594_hspi,
                parameter->data[i].regnumber) >> parameter->data[i].shift
 8001ad8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001adc:	6939      	ldr	r1, [r7, #16]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001aec:	b2db      	uxtb	r3, r3
            valuearray[i] = (LMX2594_ReadRegister(lmx2594_hspi,
 8001aee:	4619      	mov	r1, r3
 8001af0:	6978      	ldr	r0, [r7, #20]
 8001af2:	f000 f880 	bl	8001bf6 <LMX2594_ReadRegister>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4618      	mov	r0, r3
                parameter->data[i].regnumber) >> parameter->data[i].shift
 8001afa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001afe:	6939      	ldr	r1, [r7, #16]
 8001b00:	4613      	mov	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4413      	add	r3, r2
 8001b06:	440b      	add	r3, r1
 8001b08:	785b      	ldrb	r3, [r3, #1]
 8001b0a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	fa40 f303 	asr.w	r3, r0, r3
                ) & mask;
 8001b14:	b21a      	sxth	r2, r3
 8001b16:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	b21a      	sxth	r2, r3
            valuearray[i] = (LMX2594_ReadRegister(lmx2594_hspi,
 8001b1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
                ) & mask;
 8001b22:	b292      	uxth	r2, r2
            valuearray[i] = (LMX2594_ReadRegister(lmx2594_hspi,
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	3318      	adds	r3, #24
 8001b28:	f107 0110 	add.w	r1, r7, #16
 8001b2c:	440b      	add	r3, r1
 8001b2e:	f823 2c0c 	strh.w	r2, [r3, #-12]
    for (uint8_t i = 0; i <= 2; i++) {
 8001b32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b36:	3301      	adds	r3, #1
 8001b38:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001b3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d99a      	bls.n	8001a7a <LMX2594_ReadParameter+0x20>
        }
    }
    return ((uint64_t)valuearray[0] << 32) | (valuearray[1] << 16) | valuearray[2];
 8001b44:	8bbb      	ldrh	r3, [r7, #28]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	2200      	movs	r2, #0
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	60fa      	str	r2, [r7, #12]
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	68b9      	ldr	r1, [r7, #8]
 8001b58:	000b      	movs	r3, r1
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	8bf9      	ldrh	r1, [r7, #30]
 8001b5e:	0409      	lsls	r1, r1, #16
 8001b60:	17c8      	asrs	r0, r1, #31
 8001b62:	468a      	mov	sl, r1
 8001b64:	4683      	mov	fp, r0
 8001b66:	ea42 040a 	orr.w	r4, r2, sl
 8001b6a:	ea43 050b 	orr.w	r5, r3, fp
 8001b6e:	8c3b      	ldrh	r3, [r7, #32]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	2200      	movs	r2, #0
 8001b74:	4698      	mov	r8, r3
 8001b76:	4691      	mov	r9, r2
 8001b78:	ea44 0308 	orr.w	r3, r4, r8
 8001b7c:	603b      	str	r3, [r7, #0]
 8001b7e:	ea45 0309 	orr.w	r3, r5, r9
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	3728      	adds	r7, #40	; 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001b94 <LMX2594_WriteRegister>:
#include "lmx2594_registers_control.h"

void LMX2594_WriteRegister(LMX2594_SPI_HandleTypeDef* lmx2594_hspi, uint8_t reg_n, uint16_t value) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	70fb      	strb	r3, [r7, #3]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	803b      	strh	r3, [r7, #0]
    uint8_t data[3] = { reg_n & 0x7F, value >> 8, value };
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	733b      	strb	r3, [r7, #12]
 8001bae:	883b      	ldrh	r3, [r7, #0]
 8001bb0:	0a1b      	lsrs	r3, r3, #8
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	737b      	strb	r3, [r7, #13]
 8001bb8:	883b      	ldrh	r3, [r7, #0]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(lmx2594_hspi->cs_port, lmx2594_hspi->cs_n, 0);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6858      	ldr	r0, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	891b      	ldrh	r3, [r3, #8]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f001 fc3d 	bl	8003448 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(lmx2594_hspi->hspi, data, 3, 2);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	f107 010c 	add.w	r1, r7, #12
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	2203      	movs	r2, #3
 8001bda:	f002 f970 	bl	8003ebe <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(lmx2594_hspi->cs_port, lmx2594_hspi->cs_n, 1);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6858      	ldr	r0, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	891b      	ldrh	r3, [r3, #8]
 8001be6:	2201      	movs	r2, #1
 8001be8:	4619      	mov	r1, r3
 8001bea:	f001 fc2d 	bl	8003448 <HAL_GPIO_WritePin>
}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <LMX2594_ReadRegister>:

uint16_t LMX2594_ReadRegister(LMX2594_SPI_HandleTypeDef* lmx2594_hspi, uint8_t reg_n) {
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af02      	add	r7, sp, #8
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	70fb      	strb	r3, [r7, #3]
    uint8_t data[3] = { 0x80 | (reg_n & 0x7F), 0, 0 };
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	733b      	strb	r3, [r7, #12]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	737b      	strb	r3, [r7, #13]
 8001c10:	2300      	movs	r3, #0
 8001c12:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(lmx2594_hspi->cs_port, lmx2594_hspi->cs_n, 0);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6858      	ldr	r0, [r3, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	891b      	ldrh	r3, [r3, #8]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f001 fc12 	bl	8003448 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(lmx2594_hspi->hspi, data, data, 3, 2);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	f107 020c 	add.w	r2, r7, #12
 8001c2c:	f107 010c 	add.w	r1, r7, #12
 8001c30:	2302      	movs	r3, #2
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2303      	movs	r3, #3
 8001c36:	f002 fa7e 	bl	8004136 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(lmx2594_hspi->cs_port, lmx2594_hspi->cs_n, 1);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6858      	ldr	r0, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	891b      	ldrh	r3, [r3, #8]
 8001c42:	2201      	movs	r2, #1
 8001c44:	4619      	mov	r1, r3
 8001c46:	f001 fbff 	bl	8003448 <HAL_GPIO_WritePin>
    return data[1] << 8 | data[2];
 8001c4a:	7b7b      	ldrb	r3, [r7, #13]
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	7bbb      	ldrb	r3, [r7, #14]
 8001c52:	b21b      	sxth	r3, r3
 8001c54:	4313      	orrs	r3, r2
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	b29b      	uxth	r3, r3
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <LMX2594_CONTROL_OUTA_POWER>:
#include "lmx2594_synthesizer_control.h"

void LMX2594_CONTROL_OUTA_POWER(LMX2594_HandleTypeDef* synthesizer, uint8_t outa_power) {
 8001c64:	b5b0      	push	{r4, r5, r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	70fb      	strb	r3, [r7, #3]
    LMX2594_WriteParameter(&synthesizer->lmx2594_hspi, &LMX2594_OUTA_PD, ~outa_power);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	17da      	asrs	r2, r3, #31
 8001c78:	461c      	mov	r4, r3
 8001c7a:	4615      	mov	r5, r2
 8001c7c:	4622      	mov	r2, r4
 8001c7e:	462b      	mov	r3, r5
 8001c80:	4904      	ldr	r1, [pc, #16]	; (8001c94 <LMX2594_CONTROL_OUTA_POWER+0x30>)
 8001c82:	f7ff fe06 	bl	8001892 <LMX2594_WriteParameter>
    synthesizer->outa_power = outa_power;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	78fa      	ldrb	r2, [r7, #3]
 8001c8a:	749a      	strb	r2, [r3, #18]
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bdb0      	pop	{r4, r5, r7, pc}
 8001c94:	20000088 	.word	0x20000088

08001c98 <LMX2594_CONTROL_OUTA_MUX>:
void LMX2594_CONTROL_OUTA_LEVEL(LMX2594_HandleTypeDef* synthesizer, uint8_t outa_level) {
    LMX2594_WriteParameter(&synthesizer->lmx2594_hspi, &LMX2594_OUTA_PWR, outa_level);
    synthesizer->outa_level = outa_level;
}
void LMX2594_CONTROL_OUTA_MUX(LMX2594_HandleTypeDef* synthesizer, uint8_t outa_mux) {
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	70f9      	strb	r1, [r7, #3]
    LMX2594_WriteParameter(&synthesizer->lmx2594_hspi, &LMX2594_OUTA_MUX, outa_mux);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	78f9      	ldrb	r1, [r7, #3]
 8001ca6:	2400      	movs	r4, #0
 8001ca8:	460a      	mov	r2, r1
 8001caa:	4623      	mov	r3, r4
 8001cac:	4904      	ldr	r1, [pc, #16]	; (8001cc0 <LMX2594_CONTROL_OUTA_MUX+0x28>)
 8001cae:	f7ff fdf0 	bl	8001892 <LMX2594_WriteParameter>
    synthesizer->outa_mux = outa_mux;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	78fa      	ldrb	r2, [r7, #3]
 8001cb6:	751a      	strb	r2, [r3, #20]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd90      	pop	{r4, r7, pc}
 8001cc0:	200000a0 	.word	0x200000a0

08001cc4 <LMX2594_CONTROL_OUTB_POWER>:
void LMX2594_CONTROL_OUTB_POWER(LMX2594_HandleTypeDef* synthesizer, uint8_t outb_power) {
 8001cc4:	b5b0      	push	{r4, r5, r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	70fb      	strb	r3, [r7, #3]
    LMX2594_WriteParameter(&synthesizer->lmx2594_hspi, &LMX2594_OUTB_PD, ~outb_power);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	17da      	asrs	r2, r3, #31
 8001cd8:	461c      	mov	r4, r3
 8001cda:	4615      	mov	r5, r2
 8001cdc:	4622      	mov	r2, r4
 8001cde:	462b      	mov	r3, r5
 8001ce0:	4904      	ldr	r1, [pc, #16]	; (8001cf4 <LMX2594_CONTROL_OUTB_POWER+0x30>)
 8001ce2:	f7ff fdd6 	bl	8001892 <LMX2594_WriteParameter>
    synthesizer->outb_power = outb_power;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	78fa      	ldrb	r2, [r7, #3]
 8001cea:	755a      	strb	r2, [r3, #21]
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cf4:	2000007c 	.word	0x2000007c

08001cf8 <LMX2594_CONTROL_OUTB_MUX>:
void LMX2594_CONTROL_OUTB_LEVEL(LMX2594_HandleTypeDef* synthesizer, uint8_t outb_level) {
    LMX2594_WriteParameter(&synthesizer->lmx2594_hspi, &LMX2594_OUTB_PWR, outb_level);
    synthesizer->outb_level = outb_level;
}
void LMX2594_CONTROL_OUTB_MUX(LMX2594_HandleTypeDef* synthesizer, uint8_t outb_mux) {
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	70f9      	strb	r1, [r7, #3]
    LMX2594_WriteParameter(&synthesizer->lmx2594_hspi, &LMX2594_OUTB_MUX, outb_mux);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	78f9      	ldrb	r1, [r7, #3]
 8001d06:	2400      	movs	r4, #0
 8001d08:	460a      	mov	r2, r1
 8001d0a:	4623      	mov	r3, r4
 8001d0c:	4904      	ldr	r1, [pc, #16]	; (8001d20 <LMX2594_CONTROL_OUTB_MUX+0x28>)
 8001d0e:	f7ff fdc0 	bl	8001892 <LMX2594_WriteParameter>
    synthesizer->outb_mux = outb_mux;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	78fa      	ldrb	r2, [r7, #3]
 8001d16:	75da      	strb	r2, [r3, #23]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd90      	pop	{r4, r7, pc}
 8001d20:	200000ac 	.word	0x200000ac

08001d24 <LMX2594_CONTROL_MASH_ORDER>:
void LMX2594_CONTROL_MASH_ORDER(LMX2594_HandleTypeDef* synthesizer, uint8_t mash_order) {
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	70f9      	strb	r1, [r7, #3]
    LMX2594_WriteParameter(&synthesizer->lmx2594_hspi, &LMX2594_MASH_ORDER, mash_order);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	78f9      	ldrb	r1, [r7, #3]
 8001d32:	2400      	movs	r4, #0
 8001d34:	460a      	mov	r2, r1
 8001d36:	4623      	mov	r3, r4
 8001d38:	4904      	ldr	r1, [pc, #16]	; (8001d4c <LMX2594_CONTROL_MASH_ORDER+0x28>)
 8001d3a:	f7ff fdaa 	bl	8001892 <LMX2594_WriteParameter>
    synthesizer->mash_order = mash_order;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	78fa      	ldrb	r2, [r7, #3]
 8001d42:	761a      	strb	r2, [r3, #24]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd90      	pop	{r4, r7, pc}
 8001d4c:	20000094 	.word	0x20000094

08001d50 <LMX2594_CONTROL_CPG_VALUE>:
void LMX2594_CONTROL_CPG_VALUE(LMX2594_HandleTypeDef* synthesizer, uint8_t cpg_value) {
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	70f9      	strb	r1, [r7, #3]
    LMX2594_WriteParameter(&synthesizer->lmx2594_hspi, &LMX2594_CPG, cpg_value >> 4);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	78f9      	ldrb	r1, [r7, #3]
 8001d5e:	0909      	lsrs	r1, r1, #4
 8001d60:	b2c9      	uxtb	r1, r1
 8001d62:	b2c9      	uxtb	r1, r1
 8001d64:	2400      	movs	r4, #0
 8001d66:	460a      	mov	r2, r1
 8001d68:	4623      	mov	r3, r4
 8001d6a:	4906      	ldr	r1, [pc, #24]	; (8001d84 <LMX2594_CONTROL_CPG_VALUE+0x34>)
 8001d6c:	f7ff fd91 	bl	8001892 <LMX2594_WriteParameter>
    synthesizer->cpg_value = cpg_value & 0xF;
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	765a      	strb	r2, [r3, #25]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd90      	pop	{r4, r7, pc}
 8001d84:	20000028 	.word	0x20000028

08001d88 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION>:

void LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION(LMX2594_HandleTypeDef* synthesizer, uint32_t ndn, uint32_t ndnum, uint32_t ndden, uint16_t cd) {
 8001d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d8c:	b0b5      	sub	sp, #212	; 0xd4
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6678      	str	r0, [r7, #100]	; 0x64
 8001d92:	6639      	str	r1, [r7, #96]	; 0x60
 8001d94:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001d96:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t start = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    uint32_t end = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t summary = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001daa:	4bb1      	ldr	r3, [pc, #708]	; (8002070 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x2e8>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	4ab0      	ldr	r2, [pc, #704]	; (8002070 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x2e8>)
 8001db0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001db4:	60d3      	str	r3, [r2, #12]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001db6:	4bae      	ldr	r3, [pc, #696]	; (8002070 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x2e8>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	4aad      	ldr	r2, [pc, #692]	; (8002070 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x2e8>)
 8001dbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dc0:	60d3      	str	r3, [r2, #12]
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8001dc2:	4bac      	ldr	r3, [pc, #688]	; (8002074 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x2ec>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4aab      	ldr	r2, [pc, #684]	; (8002074 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x2ec>)
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	6013      	str	r3, [r2, #0]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001dce:	4ba9      	ldr	r3, [pc, #676]	; (8002074 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x2ec>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4aa8      	ldr	r2, [pc, #672]	; (8002074 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x2ec>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6013      	str	r3, [r2, #0]
    __ASM volatile ("NOP");
 8001dda:	bf00      	nop
    __ASM volatile ("NOP");
 8001ddc:	bf00      	nop
    __ASM volatile ("NOP");
 8001dde:	bf00      	nop
    DWT->CYCCNT = 0;
 8001de0:	4aa4      	ldr	r2, [pc, #656]	; (8002074 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x2ec>)
 8001de2:	2300      	movs	r3, #0
 8001de4:	6053      	str	r3, [r2, #4]

    if ((ndnum < ndden) & (ndn + ndnum * 1.0 / ndden <= 524287)) {
 8001de6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001de8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dea:	429a      	cmp	r2, r3
 8001dec:	bf34      	ite	cc
 8001dee:	2301      	movcc	r3, #1
 8001df0:	2300      	movcs	r3, #0
 8001df2:	b2de      	uxtb	r6, r3
 8001df4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001df6:	f7fe fb3d 	bl	8000474 <__aeabi_ui2d>
 8001dfa:	4680      	mov	r8, r0
 8001dfc:	4689      	mov	r9, r1
 8001dfe:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001e00:	f7fe fb38 	bl	8000474 <__aeabi_ui2d>
 8001e04:	4604      	mov	r4, r0
 8001e06:	460d      	mov	r5, r1
 8001e08:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001e0a:	f7fe fb33 	bl	8000474 <__aeabi_ui2d>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4620      	mov	r0, r4
 8001e14:	4629      	mov	r1, r5
 8001e16:	f7fe fcd1 	bl	80007bc <__aeabi_ddiv>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4640      	mov	r0, r8
 8001e20:	4649      	mov	r1, r9
 8001e22:	f7fe f9eb 	bl	80001fc <__adddf3>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	2301      	movs	r3, #1
 8001e30:	461c      	mov	r4, r3
 8001e32:	a389      	add	r3, pc, #548	; (adr r3, 8002058 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x2d0>)
 8001e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e38:	f7fe fe12 	bl	8000a60 <__aeabi_dcmple>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0xbe>
 8001e42:	2300      	movs	r3, #0
 8001e44:	461c      	mov	r4, r3
 8001e46:	b2e3      	uxtb	r3, r4
 8001e48:	4033      	ands	r3, r6
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 8450 	beq.w	80026f2 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x96a>
        double fvco = synthesizer->fosc * (ndn + ndnum * 1.0 / ndden);
 8001e52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e54:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 8001e58:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001e5a:	f7fe fb0b 	bl	8000474 <__aeabi_ui2d>
 8001e5e:	4680      	mov	r8, r0
 8001e60:	4689      	mov	r9, r1
 8001e62:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001e64:	f7fe fb06 	bl	8000474 <__aeabi_ui2d>
 8001e68:	4604      	mov	r4, r0
 8001e6a:	460d      	mov	r5, r1
 8001e6c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001e6e:	f7fe fb01 	bl	8000474 <__aeabi_ui2d>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4620      	mov	r0, r4
 8001e78:	4629      	mov	r1, r5
 8001e7a:	f7fe fc9f 	bl	80007bc <__aeabi_ddiv>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4640      	mov	r0, r8
 8001e84:	4649      	mov	r1, r9
 8001e86:	f7fe f9b9 	bl	80001fc <__adddf3>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4650      	mov	r0, sl
 8001e90:	4659      	mov	r1, fp
 8001e92:	f7fe fb69 	bl	8000568 <__aeabi_dmul>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
        uint8_t nd_min;
        uint8_t pfd_dly_sel;
        switch (synthesizer->mash_order) {
 8001e9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ea0:	7e1b      	ldrb	r3, [r3, #24]
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	f200 8097 	bhi.w	8001fd6 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x24e>
 8001ea8:	a201      	add	r2, pc, #4	; (adr r2, 8001eb0 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x128>)
 8001eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eae:	bf00      	nop
 8001eb0:	08001ec5 	.word	0x08001ec5
 8001eb4:	08001ef5 	.word	0x08001ef5
 8001eb8:	08001f47 	.word	0x08001f47
 8001ebc:	08001f77 	.word	0x08001f77
 8001ec0:	08001fa7 	.word	0x08001fa7
        case 0: if (fvco <= 12500000000) { nd_min = 28; pfd_dly_sel = 1; }
 8001ec4:	a366      	add	r3, pc, #408	; (adr r3, 8002060 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x2d8>)
 8001ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eca:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001ece:	f7fe fdc7 	bl	8000a60 <__aeabi_dcmple>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d006      	beq.n	8001ee6 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x15e>
 8001ed8:	231c      	movs	r3, #28
 8001eda:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
              else { nd_min = 32; pfd_dly_sel = 2; } break;
 8001ee4:	e077      	b.n	8001fd6 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x24e>
 8001ee6:	2320      	movs	r3, #32
 8001ee8:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8001eec:	2302      	movs	r3, #2
 8001eee:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
 8001ef2:	e070      	b.n	8001fd6 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x24e>
        case 1: if (fvco <= 10000000000) { nd_min = 28; pfd_dly_sel = 1; }
 8001ef4:	a35c      	add	r3, pc, #368	; (adr r3, 8002068 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x2e0>)
 8001ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efa:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001efe:	f7fe fdaf 	bl	8000a60 <__aeabi_dcmple>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d006      	beq.n	8001f16 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x18e>
 8001f08:	231c      	movs	r3, #28
 8001f0a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
              else if (fvco > 12500000000) { nd_min = 36; pfd_dly_sel = 3; }
              else { nd_min = 32; pfd_dly_sel = 2; } break;
 8001f14:	e05f      	b.n	8001fd6 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x24e>
              else if (fvco > 12500000000) { nd_min = 36; pfd_dly_sel = 3; }
 8001f16:	a352      	add	r3, pc, #328	; (adr r3, 8002060 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x2d8>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001f20:	f7fe fdb2 	bl	8000a88 <__aeabi_dcmpgt>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d006      	beq.n	8001f38 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x1b0>
 8001f2a:	2324      	movs	r3, #36	; 0x24
 8001f2c:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8001f30:	2303      	movs	r3, #3
 8001f32:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
              else { nd_min = 32; pfd_dly_sel = 2; } break;
 8001f36:	e04e      	b.n	8001fd6 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x24e>
 8001f38:	2320      	movs	r3, #32
 8001f3a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8001f3e:	2302      	movs	r3, #2
 8001f40:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
 8001f44:	e047      	b.n	8001fd6 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x24e>
        case 2: if (fvco <= 10000000000) { nd_min = 32; pfd_dly_sel = 2; }
 8001f46:	a348      	add	r3, pc, #288	; (adr r3, 8002068 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x2e0>)
 8001f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001f50:	f7fe fd86 	bl	8000a60 <__aeabi_dcmple>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d006      	beq.n	8001f68 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x1e0>
 8001f5a:	2320      	movs	r3, #32
 8001f5c:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8001f60:	2302      	movs	r3, #2
 8001f62:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
              else { nd_min = 36; pfd_dly_sel = 3; } break;
 8001f66:	e036      	b.n	8001fd6 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x24e>
 8001f68:	2324      	movs	r3, #36	; 0x24
 8001f6a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8001f6e:	2303      	movs	r3, #3
 8001f70:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
 8001f74:	e02f      	b.n	8001fd6 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x24e>
        case 3: if (fvco <= 10000000000) { nd_min = 36; pfd_dly_sel = 3; }
 8001f76:	a33c      	add	r3, pc, #240	; (adr r3, 8002068 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x2e0>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001f80:	f7fe fd6e 	bl	8000a60 <__aeabi_dcmple>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d006      	beq.n	8001f98 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x210>
 8001f8a:	2324      	movs	r3, #36	; 0x24
 8001f8c:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8001f90:	2303      	movs	r3, #3
 8001f92:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
              else { nd_min = 40; pfd_dly_sel = 4; } break;
 8001f96:	e01e      	b.n	8001fd6 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x24e>
 8001f98:	2328      	movs	r3, #40	; 0x28
 8001f9a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
 8001fa4:	e017      	b.n	8001fd6 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x24e>
        case 4: if (fvco <= 10000000000) { nd_min = 44; pfd_dly_sel = 5; }
 8001fa6:	a330      	add	r3, pc, #192	; (adr r3, 8002068 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x2e0>)
 8001fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fac:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001fb0:	f7fe fd56 	bl	8000a60 <__aeabi_dcmple>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d006      	beq.n	8001fc8 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x240>
 8001fba:	232c      	movs	r3, #44	; 0x2c
 8001fbc:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8001fc0:	2305      	movs	r3, #5
 8001fc2:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
              else { nd_min = 48; pfd_dly_sel = 6; } break;
 8001fc6:	e005      	b.n	8001fd4 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x24c>
 8001fc8:	2330      	movs	r3, #48	; 0x30
 8001fca:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8001fce:	2306      	movs	r3, #6
 8001fd0:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
 8001fd4:	bf00      	nop
        }
        if ((ndn + ndnum * 1.0 / ndden) >= nd_min) {
 8001fd6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001fd8:	f7fe fa4c 	bl	8000474 <__aeabi_ui2d>
 8001fdc:	4680      	mov	r8, r0
 8001fde:	4689      	mov	r9, r1
 8001fe0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001fe2:	f7fe fa47 	bl	8000474 <__aeabi_ui2d>
 8001fe6:	4604      	mov	r4, r0
 8001fe8:	460d      	mov	r5, r1
 8001fea:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001fec:	f7fe fa42 	bl	8000474 <__aeabi_ui2d>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	f7fe fbe0 	bl	80007bc <__aeabi_ddiv>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4640      	mov	r0, r8
 8002002:	4649      	mov	r1, r9
 8002004:	f7fe f8fa 	bl	80001fc <__adddf3>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4614      	mov	r4, r2
 800200e:	461d      	mov	r5, r3
 8002010:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fa3d 	bl	8000494 <__aeabi_i2d>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4620      	mov	r0, r4
 8002020:	4629      	mov	r1, r5
 8002022:	f7fe fd27 	bl	8000a74 <__aeabi_dcmpge>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 8362 	beq.w	80026f2 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x96a>
            uint16_t cds[19] = { 1, 2, 4, 6, 8, 12, 16, 24, 32, 48, 64, 72, 96, 128, 192, 256, 384, 512, 768 };
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x2f0>)
 8002030:	f107 0568 	add.w	r5, r7, #104	; 0x68
 8002034:	461c      	mov	r4, r3
 8002036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800203a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800203e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002042:	6028      	str	r0, [r5, #0]
 8002044:	3504      	adds	r5, #4
 8002046:	8029      	strh	r1, [r5, #0]
            int8_t cd_n = -2;
 8002048:	23fe      	movs	r3, #254	; 0xfe
 800204a:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
            for (uint8_t i = 0; i < 19; i++) if (cd == cds[i]) cd_n = i - 1;
 800204e:	2300      	movs	r3, #0
 8002050:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
 8002054:	e02a      	b.n	80020ac <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x324>
 8002056:	bf00      	nop
 8002058:	00000000 	.word	0x00000000
 800205c:	411ffffc 	.word	0x411ffffc
 8002060:	e8000000 	.word	0xe8000000
 8002064:	42074876 	.word	0x42074876
 8002068:	20000000 	.word	0x20000000
 800206c:	4202a05f 	.word	0x4202a05f
 8002070:	e000edf0 	.word	0xe000edf0
 8002074:	e0001000 	.word	0xe0001000
 8002078:	080050f4 	.word	0x080050f4
 800207c:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	3378      	adds	r3, #120	; 0x78
 8002084:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002088:	4413      	add	r3, r2
 800208a:	f833 2c68 	ldrh.w	r2, [r3, #-104]
 800208e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8002092:	4293      	cmp	r3, r2
 8002094:	d105      	bne.n	80020a2 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x31a>
 8002096:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 800209a:	3b01      	subs	r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
 80020a2:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 80020a6:	3301      	adds	r3, #1
 80020a8:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
 80020ac:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 80020b0:	2b12      	cmp	r3, #18
 80020b2:	d9e3      	bls.n	800207c <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x2f4>
            if ((cd_n != -2) & ((cd_n < 3) | (fvco <= 11500000000))) {
 80020b4:	f997 30c9 	ldrsb.w	r3, [r7, #201]	; 0xc9
 80020b8:	f113 0f02 	cmn.w	r3, #2
 80020bc:	bf14      	ite	ne
 80020be:	2301      	movne	r3, #1
 80020c0:	2300      	moveq	r3, #0
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	461d      	mov	r5, r3
 80020c6:	f997 30c9 	ldrsb.w	r3, [r7, #201]	; 0xc9
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	bfd4      	ite	le
 80020ce:	2301      	movle	r3, #1
 80020d0:	2300      	movgt	r3, #0
 80020d2:	b2dc      	uxtb	r4, r3
 80020d4:	2301      	movs	r3, #1
 80020d6:	461e      	mov	r6, r3
 80020d8:	a3c1      	add	r3, pc, #772	; (adr r3, 80023e0 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x658>)
 80020da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020de:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80020e2:	f7fe fcbd 	bl	8000a60 <__aeabi_dcmple>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x368>
 80020ec:	2300      	movs	r3, #0
 80020ee:	461e      	mov	r6, r3
 80020f0:	b2f3      	uxtb	r3, r6
 80020f2:	4323      	orrs	r3, r4
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	402b      	ands	r3, r5
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 82fa 	beq.w	80026f2 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x96a>
                start = DWT->CYCCNT;
 80020fe:	4bae      	ldr	r3, [pc, #696]	; (80023b8 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x630>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                LMX2594_WriteParameter(&synthesizer->lmx2594_hspi, &LMX2594_PFD_DLY_SEL, pfd_dly_sel);
 8002106:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002108:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800210c:	2200      	movs	r2, #0
 800210e:	653b      	str	r3, [r7, #80]	; 0x50
 8002110:	657a      	str	r2, [r7, #84]	; 0x54
 8002112:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002116:	49a9      	ldr	r1, [pc, #676]	; (80023bc <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x634>)
 8002118:	f7ff fbbb 	bl	8001892 <LMX2594_WriteParameter>
                LMX2594_WriteParameter(&synthesizer->lmx2594_hspi, &LMX2594_PLL_N, ndn);
 800211c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800211e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002120:	2200      	movs	r2, #0
 8002122:	64bb      	str	r3, [r7, #72]	; 0x48
 8002124:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002126:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800212a:	49a5      	ldr	r1, [pc, #660]	; (80023c0 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x638>)
 800212c:	f7ff fbb1 	bl	8001892 <LMX2594_WriteParameter>
                LMX2594_WriteParameter(&synthesizer->lmx2594_hspi, &LMX2594_PLL_NUM, ndnum);
 8002130:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002134:	2200      	movs	r2, #0
 8002136:	643b      	str	r3, [r7, #64]	; 0x40
 8002138:	647a      	str	r2, [r7, #68]	; 0x44
 800213a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800213e:	49a1      	ldr	r1, [pc, #644]	; (80023c4 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x63c>)
 8002140:	f7ff fba7 	bl	8001892 <LMX2594_WriteParameter>
                LMX2594_WriteParameter(&synthesizer->lmx2594_hspi, &LMX2594_PLL_DEN, ndden);
 8002144:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002148:	2200      	movs	r2, #0
 800214a:	63bb      	str	r3, [r7, #56]	; 0x38
 800214c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800214e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002152:	499d      	ldr	r1, [pc, #628]	; (80023c8 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x640>)
 8002154:	f7ff fb9d 	bl	8001892 <LMX2594_WriteParameter>
                LMX2594_WriteParameter(&synthesizer->lmx2594_hspi, &LMX2594_SEG1_EN, cd > 2);
 8002158:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800215a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800215e:	2b02      	cmp	r3, #2
 8002160:	bf8c      	ite	hi
 8002162:	2301      	movhi	r3, #1
 8002164:	2300      	movls	r3, #0
 8002166:	b2db      	uxtb	r3, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2200      	movs	r2, #0
 800216c:	633b      	str	r3, [r7, #48]	; 0x30
 800216e:	637a      	str	r2, [r7, #52]	; 0x34
 8002170:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002174:	4995      	ldr	r1, [pc, #596]	; (80023cc <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x644>)
 8002176:	f7ff fb8c 	bl	8001892 <LMX2594_WriteParameter>
                LMX2594_WriteParameter(&synthesizer->lmx2594_hspi, &LMX2594_CHDIV, cd_n);
 800217a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800217c:	f997 30c9 	ldrsb.w	r3, [r7, #201]	; 0xc9
 8002180:	17da      	asrs	r2, r3, #31
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28
 8002184:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002186:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800218a:	4991      	ldr	r1, [pc, #580]	; (80023d0 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x648>)
 800218c:	f7ff fb81 	bl	8001892 <LMX2594_WriteParameter>
                LMX2594_CONTROL_OUTA_MUX(synthesizer, cd == 1 ? LMX2594_OUT_MUX_VCO : LMX2594_OUT_MUX_ChannelDivider);
 8002190:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8002194:	2b01      	cmp	r3, #1
 8002196:	bf0c      	ite	eq
 8002198:	2301      	moveq	r3, #1
 800219a:	2300      	movne	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	4619      	mov	r1, r3
 80021a0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80021a2:	f7ff fd79 	bl	8001c98 <LMX2594_CONTROL_OUTA_MUX>
                LMX2594_CONTROL_OUTB_MUX(synthesizer, cd == 1 ? LMX2594_OUT_MUX_VCO : LMX2594_OUT_MUX_ChannelDivider);
 80021a6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	bf0c      	ite	eq
 80021ae:	2301      	moveq	r3, #1
 80021b0:	2300      	movne	r3, #0
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	4619      	mov	r1, r3
 80021b6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80021b8:	f7ff fd9e 	bl	8001cf8 <LMX2594_CONTROL_OUTB_MUX>
                end = DWT->CYCCNT;
 80021bc:	4b7e      	ldr	r3, [pc, #504]	; (80023b8 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x630>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                summary = summary + end - start;
 80021c4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80021c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021cc:	441a      	add	r2, r3
 80021ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                synthesizer->ndn = ndn;
 80021d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021dc:	629a      	str	r2, [r3, #40]	; 0x28
                synthesizer->ndnum = ndnum;
 80021de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80021e2:	62da      	str	r2, [r3, #44]	; 0x2c
                synthesizer->ndden = ndden;
 80021e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30
                synthesizer->fvco = fvco;
 80021ea:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80021ec:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80021f0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
                synthesizer->cd = cd;
 80021f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021f6:	f8b7 20f8 	ldrh.w	r2, [r7, #248]	; 0xf8
 80021fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
                synthesizer->fout = fvco / cd;
 80021fe:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe f946 	bl	8000494 <__aeabi_i2d>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8002210:	f7fe fad4 	bl	80007bc <__aeabi_ddiv>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800221a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
                if (synthesizer->chip_power) {
 800221e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002220:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 8264 	beq.w	80026f2 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x96a>
                    start = DWT->CYCCNT;
 800222a:	4b63      	ldr	r3, [pc, #396]	; (80023b8 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x630>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                    LMX2594_WriteParameter(&synthesizer->lmx2594_hspi, &LMX2594_FCAL_EN, 0);
 8002232:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	4965      	ldr	r1, [pc, #404]	; (80023d4 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x64c>)
 800223e:	f7ff fb28 	bl	8001892 <LMX2594_WriteParameter>
                    uint16_t CCoreMax;
                    uint16_t ACoreMin;
                    uint16_t ACoreMax;
                    uint16_t VCO_CAPCTRL_STRT;
                    uint16_t VCO_DACISET_STRT;
                    if ((fvco >= 11900000000) & (fvco <= 12100000000)) {
 8002242:	2301      	movs	r3, #1
 8002244:	461c      	mov	r4, r3
 8002246:	a34e      	add	r3, pc, #312	; (adr r3, 8002380 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x5f8>)
 8002248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8002250:	f7fe fc10 	bl	8000a74 <__aeabi_dcmpge>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x4d6>
 800225a:	2300      	movs	r3, #0
 800225c:	461c      	mov	r4, r3
 800225e:	b2e4      	uxtb	r4, r4
 8002260:	2301      	movs	r3, #1
 8002262:	461d      	mov	r5, r3
 8002264:	a348      	add	r3, pc, #288	; (adr r3, 8002388 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x600>)
 8002266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800226e:	f7fe fbf7 	bl	8000a60 <__aeabi_dcmple>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x4f4>
 8002278:	2300      	movs	r3, #0
 800227a:	461d      	mov	r5, r3
 800227c:	b2eb      	uxtb	r3, r5
 800227e:	4023      	ands	r3, r4
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x514>
                        VCO_CORE = 4;
 8002286:	2304      	movs	r3, #4
 8002288:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
                        VCO_CAPCTRL_STRT = 1;
 800228c:	2301      	movs	r3, #1
 800228e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
                        VCO_DACISET_STRT = 300;
 8002292:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002296:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800229a:	e1d8      	b.n	800264e <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x8c6>
                    }
                    else {
                        if (fvco <= 8600000000) {
 800229c:	f04f 4230 	mov.w	r2, #2952790016	; 0xb0000000
 80022a0:	4b4d      	ldr	r3, [pc, #308]	; (80023d8 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x650>)
 80022a2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80022a6:	f7fe fbdb 	bl	8000a60 <__aeabi_dcmple>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d01a      	beq.n	80022e6 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x55e>
                            VCO_CORE = 1; fCoreMin = 7500000000; fCoreMax = 8600000000; CCoreMin = 164; CCoreMax = 12; ACoreMin = 299; ACoreMax = 240;
 80022b0:	2301      	movs	r3, #1
 80022b2:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 80022b6:	a336      	add	r3, pc, #216	; (adr r3, 8002390 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x608>)
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 80022c0:	4a46      	ldr	r2, [pc, #280]	; (80023dc <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x654>)
 80022c2:	f04f 0302 	mov.w	r3, #2
 80022c6:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
 80022ca:	23a4      	movs	r3, #164	; 0xa4
 80022cc:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80022d0:	230c      	movs	r3, #12
 80022d2:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 80022d6:	f240 132b 	movw	r3, #299	; 0x12b
 80022da:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80022de:	23f0      	movs	r3, #240	; 0xf0
 80022e0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80022e4:	e111      	b.n	800250a <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x782>
                        }
                        else if (fvco <= 9800000000) {
 80022e6:	a32c      	add	r3, pc, #176	; (adr r3, 8002398 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x610>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80022f0:	f7fe fbb6 	bl	8000a60 <__aeabi_dcmple>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d01a      	beq.n	8002330 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x5a8>
                            VCO_CORE = 2; fCoreMin = 8600000000; fCoreMax = 9800000000; CCoreMin = 165; CCoreMax = 16; ACoreMin = 356; ACoreMax = 247;
 80022fa:	2302      	movs	r3, #2
 80022fc:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8002300:	4a36      	ldr	r2, [pc, #216]	; (80023dc <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x654>)
 8002302:	f04f 0302 	mov.w	r3, #2
 8002306:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 800230a:	a325      	add	r3, pc, #148	; (adr r3, 80023a0 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x618>)
 800230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002310:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
 8002314:	23a5      	movs	r3, #165	; 0xa5
 8002316:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800231a:	2310      	movs	r3, #16
 800231c:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8002320:	f44f 73b2 	mov.w	r3, #356	; 0x164
 8002324:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8002328:	23f7      	movs	r3, #247	; 0xf7
 800232a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800232e:	e0ec      	b.n	800250a <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x782>
                        }
                        else if (fvco <= 10800000000) {
 8002330:	a31d      	add	r3, pc, #116	; (adr r3, 80023a8 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x620>)
 8002332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002336:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800233a:	f7fe fb91 	bl	8000a60 <__aeabi_dcmple>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d051      	beq.n	80023e8 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x660>
                            VCO_CORE = 3; fCoreMin = 9800000000; fCoreMax = 10800000000; CCoreMin = 158; CCoreMax = 19; ACoreMin = 324; ACoreMax = 224;
 8002344:	2303      	movs	r3, #3
 8002346:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800234a:	a315      	add	r3, pc, #84	; (adr r3, 80023a0 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x618>)
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 8002354:	a316      	add	r3, pc, #88	; (adr r3, 80023b0 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x628>)
 8002356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235a:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
 800235e:	239e      	movs	r3, #158	; 0x9e
 8002360:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8002364:	2313      	movs	r3, #19
 8002366:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 800236a:	f44f 73a2 	mov.w	r3, #324	; 0x144
 800236e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8002372:	23e0      	movs	r3, #224	; 0xe0
 8002374:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8002378:	e0c7      	b.n	800250a <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x782>
 800237a:	bf00      	nop
 800237c:	f3af 8000 	nop.w
 8002380:	b8000000 	.word	0xb8000000
 8002384:	42062a5c 	.word	0x42062a5c
 8002388:	c8000000 	.word	0xc8000000
 800238c:	420689ba 	.word	0x420689ba
 8002390:	bf08eb00 	.word	0xbf08eb00
 8002394:	00000001 	.word	0x00000001
 8002398:	10000000 	.word	0x10000000
 800239c:	42024101 	.word	0x42024101
 80023a0:	48202200 	.word	0x48202200
 80023a4:	00000002 	.word	0x00000002
 80023a8:	60000000 	.word	0x60000000
 80023ac:	42041dd7 	.word	0x42041dd7
 80023b0:	83baec00 	.word	0x83baec00
 80023b4:	00000002 	.word	0x00000002
 80023b8:	e0001000 	.word	0xe0001000
 80023bc:	20000058 	.word	0x20000058
 80023c0:	2000004c 	.word	0x2000004c
 80023c4:	20000070 	.word	0x20000070
 80023c8:	20000064 	.word	0x20000064
 80023cc:	200000b8 	.word	0x200000b8
 80023d0:	200000c4 	.word	0x200000c4
 80023d4:	20000004 	.word	0x20000004
 80023d8:	420004cc 	.word	0x420004cc
 80023dc:	00999600 	.word	0x00999600
 80023e0:	98000000 	.word	0x98000000
 80023e4:	42056ba0 	.word	0x42056ba0
                        }
                        else if (fvco <= 12000000000) {
 80023e8:	a3e0      	add	r3, pc, #896	; (adr r3, 800276c <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x9e4>)
 80023ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ee:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80023f2:	f7fe fb35 	bl	8000a60 <__aeabi_dcmple>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d01a      	beq.n	8002432 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x6aa>
                            VCO_CORE = 4; fCoreMin = 10800000000; fCoreMax = 12000000000; CCoreMin = 140; CCoreMax = 0; ACoreMin = 383; ACoreMax = 244;
 80023fc:	2304      	movs	r3, #4
 80023fe:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8002402:	a3dc      	add	r3, pc, #880	; (adr r3, 8002774 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x9ec>)
 8002404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002408:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 800240c:	a3db      	add	r3, pc, #876	; (adr r3, 800277c <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x9f4>)
 800240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002412:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
 8002416:	238c      	movs	r3, #140	; 0x8c
 8002418:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800241c:	2300      	movs	r3, #0
 800241e:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8002422:	f240 137f 	movw	r3, #383	; 0x17f
 8002426:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800242a:	23f4      	movs	r3, #244	; 0xf4
 800242c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8002430:	e06b      	b.n	800250a <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x782>
                        }
                        else if (fvco <= 12900000000) {
 8002432:	a3d4      	add	r3, pc, #848	; (adr r3, 8002784 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x9fc>)
 8002434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002438:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800243c:	f7fe fb10 	bl	8000a60 <__aeabi_dcmple>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d019      	beq.n	800247a <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x6f2>
                            VCO_CORE = 5; fCoreMin = 12000000000; fCoreMax = 12900000000; CCoreMin = 183; CCoreMax = 36; ACoreMin = 205; ACoreMax = 146;
 8002446:	2305      	movs	r3, #5
 8002448:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800244c:	a3cb      	add	r3, pc, #812	; (adr r3, 800277c <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x9f4>)
 800244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002452:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 8002456:	4abe      	ldr	r2, [pc, #760]	; (8002750 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x9c8>)
 8002458:	f04f 0303 	mov.w	r3, #3
 800245c:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
 8002460:	23b7      	movs	r3, #183	; 0xb7
 8002462:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8002466:	2324      	movs	r3, #36	; 0x24
 8002468:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 800246c:	23cd      	movs	r3, #205	; 0xcd
 800246e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8002472:	2392      	movs	r3, #146	; 0x92
 8002474:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8002478:	e047      	b.n	800250a <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x782>
                        }
                        else if (fvco <= 13900000000) {
 800247a:	a3ad      	add	r3, pc, #692	; (adr r3, 8002730 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x9a8>)
 800247c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002480:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8002484:	f7fe faec 	bl	8000a60 <__aeabi_dcmple>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d019      	beq.n	80024c2 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x73a>
                            VCO_CORE = 6; fCoreMin = 12900000000; fCoreMax = 13900000000; CCoreMin = 155; CCoreMax = 6; ACoreMin = 242; ACoreMax = 163;
 800248e:	2306      	movs	r3, #6
 8002490:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8002494:	4aae      	ldr	r2, [pc, #696]	; (8002750 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x9c8>)
 8002496:	f04f 0303 	mov.w	r3, #3
 800249a:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 800249e:	a3a6      	add	r3, pc, #664	; (adr r3, 8002738 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x9b0>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
 80024a8:	239b      	movs	r3, #155	; 0x9b
 80024aa:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80024ae:	2306      	movs	r3, #6
 80024b0:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 80024b4:	23f2      	movs	r3, #242	; 0xf2
 80024b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80024ba:	23a3      	movs	r3, #163	; 0xa3
 80024bc:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80024c0:	e023      	b.n	800250a <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x782>
                        }
                        else if (fvco <= 15000000000) {
 80024c2:	a39f      	add	r3, pc, #636	; (adr r3, 8002740 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x9b8>)
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80024cc:	f7fe fac8 	bl	8000a60 <__aeabi_dcmple>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d019      	beq.n	800250a <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x782>
                            VCO_CORE = 7; fCoreMin = 13900000000; fCoreMax = 15000000000; CCoreMin = 175; CCoreMax = 19; ACoreMin = 323; ACoreMax = 244;
 80024d6:	2307      	movs	r3, #7
 80024d8:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 80024dc:	a396      	add	r3, pc, #600	; (adr r3, 8002738 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x9b0>)
 80024de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e2:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 80024e6:	a398      	add	r3, pc, #608	; (adr r3, 8002748 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x9c0>)
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
 80024f0:	23af      	movs	r3, #175	; 0xaf
 80024f2:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80024f6:	2313      	movs	r3, #19
 80024f8:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 80024fc:	f240 1343 	movw	r3, #323	; 0x143
 8002500:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8002504:	23f4      	movs	r3, #244	; 0xf4
 8002506:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
                        }
                        VCO_CAPCTRL_STRT = round(CCoreMin - (CCoreMin - CCoreMax) * (fvco - fCoreMin) / (fCoreMax - fCoreMin));
 800250a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800250e:	4618      	mov	r0, r3
 8002510:	f7fd ffc0 	bl	8000494 <__aeabi_i2d>
 8002514:	4680      	mov	r8, r0
 8002516:	4689      	mov	r9, r1
 8002518:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 800251c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	4618      	mov	r0, r3
 8002524:	f7fd ffb6 	bl	8000494 <__aeabi_i2d>
 8002528:	4604      	mov	r4, r0
 800252a:	460d      	mov	r5, r1
 800252c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002530:	f7fd ffe4 	bl	80004fc <__aeabi_ul2d>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800253c:	f7fd fe5c 	bl	80001f8 <__aeabi_dsub>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4620      	mov	r0, r4
 8002546:	4629      	mov	r1, r5
 8002548:	f7fe f80e 	bl	8000568 <__aeabi_dmul>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4614      	mov	r4, r2
 8002552:	461d      	mov	r5, r3
 8002554:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002558:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800255c:	1a86      	subs	r6, r0, r2
 800255e:	623e      	str	r6, [r7, #32]
 8002560:	eb61 0303 	sbc.w	r3, r1, r3
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
 8002566:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800256a:	f7fd ffc7 	bl	80004fc <__aeabi_ul2d>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4620      	mov	r0, r4
 8002574:	4629      	mov	r1, r5
 8002576:	f7fe f921 	bl	80007bc <__aeabi_ddiv>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4640      	mov	r0, r8
 8002580:	4649      	mov	r1, r9
 8002582:	f7fd fe39 	bl	80001f8 <__aeabi_dsub>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	ec43 2b17 	vmov	d7, r2, r3
 800258e:	eeb0 0a47 	vmov.f32	s0, s14
 8002592:	eef0 0a67 	vmov.f32	s1, s15
 8002596:	f002 fd5b 	bl	8005050 <round>
 800259a:	ec53 2b10 	vmov	r2, r3, d0
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	f7fe fa7b 	bl	8000a9c <__aeabi_d2uiz>
 80025a6:	4603      	mov	r3, r0
 80025a8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
                        VCO_DACISET_STRT = round(ACoreMin + (ACoreMax - ACoreMin) * (fvco - fCoreMin) / (fCoreMax - fCoreMin));
 80025ac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd ff6f 	bl	8000494 <__aeabi_i2d>
 80025b6:	4680      	mov	r8, r0
 80025b8:	4689      	mov	r9, r1
 80025ba:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 80025be:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fd ff65 	bl	8000494 <__aeabi_i2d>
 80025ca:	4604      	mov	r4, r0
 80025cc:	460d      	mov	r5, r1
 80025ce:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80025d2:	f7fd ff93 	bl	80004fc <__aeabi_ul2d>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80025de:	f7fd fe0b 	bl	80001f8 <__aeabi_dsub>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4620      	mov	r0, r4
 80025e8:	4629      	mov	r1, r5
 80025ea:	f7fd ffbd 	bl	8000568 <__aeabi_dmul>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4614      	mov	r4, r2
 80025f4:	461d      	mov	r5, r3
 80025f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80025fa:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80025fe:	1a86      	subs	r6, r0, r2
 8002600:	61be      	str	r6, [r7, #24]
 8002602:	eb61 0303 	sbc.w	r3, r1, r3
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800260c:	f7fd ff76 	bl	80004fc <__aeabi_ul2d>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4620      	mov	r0, r4
 8002616:	4629      	mov	r1, r5
 8002618:	f7fe f8d0 	bl	80007bc <__aeabi_ddiv>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4640      	mov	r0, r8
 8002622:	4649      	mov	r1, r9
 8002624:	f7fd fdea 	bl	80001fc <__adddf3>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	ec43 2b17 	vmov	d7, r2, r3
 8002630:	eeb0 0a47 	vmov.f32	s0, s14
 8002634:	eef0 0a67 	vmov.f32	s1, s15
 8002638:	f002 fd0a 	bl	8005050 <round>
 800263c:	ec53 2b10 	vmov	r2, r3, d0
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	f7fe fa2a 	bl	8000a9c <__aeabi_d2uiz>
 8002648:	4603      	mov	r3, r0
 800264a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
                    }
                    LMX2594_WriteParameter(&synthesizer->lmx2594_hspi, &LMX2594_VCO_SEL, VCO_CORE);
 800264e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002650:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8002654:	2200      	movs	r2, #0
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	617a      	str	r2, [r7, #20]
 800265a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800265e:	493d      	ldr	r1, [pc, #244]	; (8002754 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x9cc>)
 8002660:	f7ff f917 	bl	8001892 <LMX2594_WriteParameter>
                    LMX2594_WriteParameter(&synthesizer->lmx2594_hspi, &LMX2594_VCO_CAPCTRL_STRT, VCO_CAPCTRL_STRT);
 8002664:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002666:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800266a:	2200      	movs	r2, #0
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	60fa      	str	r2, [r7, #12]
 8002670:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002674:	4938      	ldr	r1, [pc, #224]	; (8002758 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x9d0>)
 8002676:	f7ff f90c 	bl	8001892 <LMX2594_WriteParameter>
                    LMX2594_WriteParameter(&synthesizer->lmx2594_hspi, &LMX2594_VCO_DACISET_STRT, VCO_DACISET_STRT);
 800267a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800267c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002680:	2200      	movs	r2, #0
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	607a      	str	r2, [r7, #4]
 8002686:	e9d7 2300 	ldrd	r2, r3, [r7]
 800268a:	4934      	ldr	r1, [pc, #208]	; (800275c <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x9d4>)
 800268c:	f7ff f901 	bl	8001892 <LMX2594_WriteParameter>
                    HAL_GPIO_WritePin(synthesizer->led_port, synthesizer->led_n, 1);
 8002690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002692:	68d8      	ldr	r0, [r3, #12]
 8002694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002696:	8a1b      	ldrh	r3, [r3, #16]
 8002698:	2201      	movs	r2, #1
 800269a:	4619      	mov	r1, r3
 800269c:	f000 fed4 	bl	8003448 <HAL_GPIO_WritePin>
                    LMX2594_WriteParameter(&synthesizer->lmx2594_hspi, &LMX2594_FCAL_EN, 1);
 80026a0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80026a2:	f04f 0201 	mov.w	r2, #1
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	492d      	ldr	r1, [pc, #180]	; (8002760 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x9d8>)
 80026ac:	f7ff f8f1 	bl	8001892 <LMX2594_WriteParameter>
                    while (LMX2594_ReadParameter(&synthesizer->lmx2594_hspi, &LMX2594_rb_LD_VTUNE) != 2);
 80026b0:	bf00      	nop
 80026b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026b4:	492b      	ldr	r1, [pc, #172]	; (8002764 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x9dc>)
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff f9cf 	bl	8001a5a <LMX2594_ReadParameter>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	1e91      	subs	r1, r2, #2
 80026c2:	430b      	orrs	r3, r1
 80026c4:	d1f5      	bne.n	80026b2 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x92a>
                    HAL_GPIO_WritePin(synthesizer->led_port, synthesizer->led_n, 0);
 80026c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026c8:	68d8      	ldr	r0, [r3, #12]
 80026ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026cc:	8a1b      	ldrh	r3, [r3, #16]
 80026ce:	2200      	movs	r2, #0
 80026d0:	4619      	mov	r1, r3
 80026d2:	f000 feb9 	bl	8003448 <HAL_GPIO_WritePin>
                    end = DWT->CYCCNT;
 80026d6:	4b24      	ldr	r3, [pc, #144]	; (8002768 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION+0x9e0>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    summary = summary + end - start;
 80026de:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80026e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026e6:	441a      	add	r2, r3
 80026e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }
        }
    }
    synthesizer->time = summary * 1.0 / HAL_RCC_GetHCLKFreq();
 80026f2:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80026f6:	f7fd febd 	bl	8000474 <__aeabi_ui2d>
 80026fa:	4604      	mov	r4, r0
 80026fc:	460d      	mov	r5, r1
 80026fe:	f001 fb21 	bl	8003d44 <HAL_RCC_GetHCLKFreq>
 8002702:	4603      	mov	r3, r0
 8002704:	4618      	mov	r0, r3
 8002706:	f7fd feb5 	bl	8000474 <__aeabi_ui2d>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4620      	mov	r0, r4
 8002710:	4629      	mov	r1, r5
 8002712:	f7fe f853 	bl	80007bc <__aeabi_ddiv>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800271c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 8002720:	bf00      	nop
 8002722:	37d4      	adds	r7, #212	; 0xd4
 8002724:	46bd      	mov	sp, r7
 8002726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800272a:	bf00      	nop
 800272c:	f3af 8000 	nop.w
 8002730:	58000000 	.word	0x58000000
 8002734:	4209e409 	.word	0x4209e409
 8002738:	3c812b00 	.word	0x3c812b00
 800273c:	00000003 	.word	0x00000003
 8002740:	b0000000 	.word	0xb0000000
 8002744:	420bf08e 	.word	0x420bf08e
 8002748:	7e11d600 	.word	0x7e11d600
 800274c:	00000003 	.word	0x00000003
 8002750:	00e66100 	.word	0x00e66100
 8002754:	20000040 	.word	0x20000040
 8002758:	200000d0 	.word	0x200000d0
 800275c:	20000034 	.word	0x20000034
 8002760:	20000004 	.word	0x20000004
 8002764:	200000dc 	.word	0x200000dc
 8002768:	e0001000 	.word	0xe0001000
 800276c:	c0000000 	.word	0xc0000000
 8002770:	42065a0b 	.word	0x42065a0b
 8002774:	83baec00 	.word	0x83baec00
 8002778:	00000002 	.word	0x00000002
 800277c:	cb417800 	.word	0xcb417800
 8002780:	00000002 	.word	0x00000002
 8002784:	08000000 	.word	0x08000000
 8002788:	42080733 	.word	0x42080733

0800278c <LMX2594_CONTROL_CHIP_POWER>:

void LMX2594_CONTROL_CHIP_POWER(LMX2594_HandleTypeDef* synthesizer, uint8_t chip_power) {
 800278c:	b5b0      	push	{r4, r5, r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af02      	add	r7, sp, #8
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	70fb      	strb	r3, [r7, #3]
    LMX2594_WriteParameter(&synthesizer->lmx2594_hspi, &LMX2594_POWERDOWN, ~chip_power);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	43db      	mvns	r3, r3
 800279e:	17da      	asrs	r2, r3, #31
 80027a0:	461c      	mov	r4, r3
 80027a2:	4615      	mov	r5, r2
 80027a4:	4622      	mov	r2, r4
 80027a6:	462b      	mov	r3, r5
 80027a8:	490d      	ldr	r1, [pc, #52]	; (80027e0 <LMX2594_CONTROL_CHIP_POWER+0x54>)
 80027aa:	f7ff f872 	bl	8001892 <LMX2594_WriteParameter>
    synthesizer->chip_power = chip_power;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    if (chip_power) LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION(synthesizer, synthesizer->ndn, synthesizer->ndnum, synthesizer->ndden, synthesizer->cd);
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00d      	beq.n	80027d8 <LMX2594_CONTROL_CHIP_POWER+0x4c>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	4603      	mov	r3, r0
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff fad8 	bl	8001d88 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION>
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bdb0      	pop	{r4, r5, r7, pc}
 80027e0:	20000010 	.word	0x20000010

080027e4 <LMX2594_CONTROL_CHIP_RESET>:

void LMX2594_CONTROL_CHIP_RESET(LMX2594_HandleTypeDef* synthesizer) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
    LMX2594_WriteRegister(&synthesizer->lmx2594_hspi, 0, 0x2412);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f242 4212 	movw	r2, #9234	; 0x2412
 80027f2:	2100      	movs	r1, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff f9cd 	bl	8001b94 <LMX2594_WriteRegister>
    LMX2594_WriteRegister(&synthesizer->lmx2594_hspi, 0, 0x2410);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f242 4210 	movw	r2, #9232	; 0x2410
 8002800:	2100      	movs	r1, #0
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff f9c6 	bl	8001b94 <LMX2594_WriteRegister>
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <LMX2594_Init_Synthesizer>:
    SPI_HandleTypeDef* hspi,
    GPIO_TypeDef* cs_port,
    uint16_t cs_n,
    GPIO_TypeDef* led_port,
    uint16_t led_n
) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b0a0      	sub	sp, #128	; 0x80
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	807b      	strh	r3, [r7, #2]
    LMX2594_SPI_HandleTypeDef lmx2594_hspi = {
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	677b      	str	r3, [r7, #116]	; 0x74
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	67bb      	str	r3, [r7, #120]	; 0x78
 8002826:	887b      	ldrh	r3, [r7, #2]
 8002828:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        .hspi = hspi,
        .cs_port = cs_port,
        .cs_n = cs_n
    };
    LMX2594_HandleTypeDef lmx2594 = {
 800282c:	f107 0310 	add.w	r3, r7, #16
 8002830:	2260      	movs	r2, #96	; 0x60
 8002832:	2100      	movs	r1, #0
 8002834:	4618      	mov	r0, r3
 8002836:	f002 fb81 	bl	8004f3c <memset>
 800283a:	f107 0310 	add.w	r3, r7, #16
 800283e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8002842:	ca07      	ldmia	r2, {r0, r1, r2}
 8002844:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002848:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002852:	843b      	strh	r3, [r7, #32]
        .lmx2594_hspi = lmx2594_hspi,
        .led_port = led_port,
        .led_n = led_n,
    };
    return lmx2594;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4618      	mov	r0, r3
 8002858:	f107 0310 	add.w	r3, r7, #16
 800285c:	2260      	movs	r2, #96	; 0x60
 800285e:	4619      	mov	r1, r3
 8002860:	f002 fb5e 	bl	8004f20 <memcpy>
}
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	3780      	adds	r7, #128	; 0x80
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	0000      	movs	r0, r0
	...

08002870 <LMX2594_IN_PAIR_Init>:
#include "lmx2594_in_pair.h"

void LMX2594_IN_PAIR_Init(PAIR_OF_LMX2594_HandleTypeDef* pair_of_lmx2594) {
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af02      	add	r7, sp, #8
 8002876:	6078      	str	r0, [r7, #4]
    LMX2594_CONTROL_CHIP_RESET(pair_of_lmx2594->lmx2594_a);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ffb1 	bl	80027e4 <LMX2594_CONTROL_CHIP_RESET>
    LMX2594_CONTROL_CHIP_RESET(pair_of_lmx2594->lmx2594_b);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ffac 	bl	80027e4 <LMX2594_CONTROL_CHIP_RESET>
    LMX2594_CONTROL_CPG_VALUE(pair_of_lmx2594->lmx2594_a, LMX2594_CPG15);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	217f      	movs	r1, #127	; 0x7f
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fa5c 	bl	8001d50 <LMX2594_CONTROL_CPG_VALUE>
    LMX2594_CONTROL_CPG_VALUE(pair_of_lmx2594->lmx2594_b, LMX2594_CPG3);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2143      	movs	r1, #67	; 0x43
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fa56 	bl	8001d50 <LMX2594_CONTROL_CPG_VALUE>
    LMX2594_WriteParameter(&pair_of_lmx2594->lmx2594_a->lmx2594_hspi, &LMX2594_CAL_CLK_DIV, 0);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	4921      	ldr	r1, [pc, #132]	; (8002938 <LMX2594_IN_PAIR_Init+0xc8>)
 80028b4:	f7fe ffed 	bl	8001892 <LMX2594_WriteParameter>
    LMX2594_WriteParameter(&pair_of_lmx2594->lmx2594_b->lmx2594_hspi, &LMX2594_CAL_CLK_DIV, 0);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4618      	mov	r0, r3
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	491c      	ldr	r1, [pc, #112]	; (8002938 <LMX2594_IN_PAIR_Init+0xc8>)
 80028c8:	f7fe ffe3 	bl	8001892 <LMX2594_WriteParameter>
    LMX2594_CONTROL_MASH_ORDER(pair_of_lmx2594->lmx2594_a, LMX2594_MASH_ORDER_Fractional3);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2103      	movs	r1, #3
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fa26 	bl	8001d24 <LMX2594_CONTROL_MASH_ORDER>
    LMX2594_CONTROL_MASH_ORDER(pair_of_lmx2594->lmx2594_b, LMX2594_MASH_ORDER_Integer);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fa20 	bl	8001d24 <LMX2594_CONTROL_MASH_ORDER>
    pair_of_lmx2594->lmx2594_a->fosc = 100000000;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6819      	ldr	r1, [r3, #0]
 80028e8:	a311      	add	r3, pc, #68	; (adr r3, 8002930 <LMX2594_IN_PAIR_Init+0xc0>)
 80028ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ee:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pair_of_lmx2594->lmx2594_b->fosc = 100000000;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	a30e      	add	r3, pc, #56	; (adr r3, 8002930 <LMX2594_IN_PAIR_Init+0xc0>)
 80028f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fc:	e9c1 2308 	strd	r2, r3, [r1, #32]
    LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION(pair_of_lmx2594->lmx2594_a, 96, 0, 1, 96);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	2360      	movs	r3, #96	; 0x60
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	2301      	movs	r3, #1
 800290a:	2200      	movs	r2, #0
 800290c:	2160      	movs	r1, #96	; 0x60
 800290e:	f7ff fa3b 	bl	8001d88 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION>
    LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION(pair_of_lmx2594->lmx2594_b, 96, 0, 1, 96);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6858      	ldr	r0, [r3, #4]
 8002916:	2360      	movs	r3, #96	; 0x60
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2301      	movs	r3, #1
 800291c:	2200      	movs	r2, #0
 800291e:	2160      	movs	r1, #96	; 0x60
 8002920:	f7ff fa32 	bl	8001d88 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION>
}
 8002924:	bf00      	nop
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	f3af 8000 	nop.w
 8002930:	00000000 	.word	0x00000000
 8002934:	4197d784 	.word	0x4197d784
 8002938:	2000001c 	.word	0x2000001c

0800293c <LMX2594_IN_PAIR_Chip_Power>:

void LMX2594_IN_PAIR_Chip_Power(PAIR_OF_LMX2594_HandleTypeDef* pair_of_lmx2594, uint8_t chip_power) {
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	70fb      	strb	r3, [r7, #3]
    LMX2594_CONTROL_CHIP_POWER(pair_of_lmx2594->lmx2594_a, chip_power);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ff1b 	bl	800278c <LMX2594_CONTROL_CHIP_POWER>
    LMX2594_CONTROL_CHIP_POWER(pair_of_lmx2594->lmx2594_b, chip_power);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff ff14 	bl	800278c <LMX2594_CONTROL_CHIP_POWER>
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	0000      	movs	r0, r0
	...

08002970 <LMX2594_IN_PAIR_Out_Power>:

void LMX2594_IN_PAIR_Out_Power(PAIR_OF_LMX2594_HandleTypeDef* pair_of_lmx2594, uint8_t out_power) {
 8002970:	b5b0      	push	{r4, r5, r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	70fb      	strb	r3, [r7, #3]
	if (out_power == 1) {
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d12d      	bne.n	80029de <LMX2594_IN_PAIR_Out_Power+0x6e>
		LMX2594_CONTROL_OUTA_POWER(pair_of_lmx2594->lmx2594_b, pair_of_lmx2594->lmx2594_b->fout >= 7500000000);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685c      	ldr	r4, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800298e:	2301      	movs	r3, #1
 8002990:	461d      	mov	r5, r3
 8002992:	a31d      	add	r3, pc, #116	; (adr r3, 8002a08 <LMX2594_IN_PAIR_Out_Power+0x98>)
 8002994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002998:	f7fe f86c 	bl	8000a74 <__aeabi_dcmpge>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <LMX2594_IN_PAIR_Out_Power+0x36>
 80029a2:	2300      	movs	r3, #0
 80029a4:	461d      	mov	r5, r3
 80029a6:	b2eb      	uxtb	r3, r5
 80029a8:	4619      	mov	r1, r3
 80029aa:	4620      	mov	r0, r4
 80029ac:	f7ff f95a 	bl	8001c64 <LMX2594_CONTROL_OUTA_POWER>
		LMX2594_CONTROL_OUTB_POWER(pair_of_lmx2594->lmx2594_b, pair_of_lmx2594->lmx2594_b->fout <  7500000000);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685c      	ldr	r4, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80029bc:	2301      	movs	r3, #1
 80029be:	461d      	mov	r5, r3
 80029c0:	a311      	add	r3, pc, #68	; (adr r3, 8002a08 <LMX2594_IN_PAIR_Out_Power+0x98>)
 80029c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c6:	f7fe f841 	bl	8000a4c <__aeabi_dcmplt>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <LMX2594_IN_PAIR_Out_Power+0x64>
 80029d0:	2300      	movs	r3, #0
 80029d2:	461d      	mov	r5, r3
 80029d4:	b2eb      	uxtb	r3, r5
 80029d6:	4619      	mov	r1, r3
 80029d8:	4620      	mov	r0, r4
 80029da:	f7ff f973 	bl	8001cc4 <LMX2594_CONTROL_OUTB_POWER>
	}
	if (out_power == 0) {
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10b      	bne.n	80029fc <LMX2594_IN_PAIR_Out_Power+0x8c>
		LMX2594_CONTROL_OUTA_POWER(pair_of_lmx2594->lmx2594_b, 0);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff f93a 	bl	8001c64 <LMX2594_CONTROL_OUTA_POWER>
		LMX2594_CONTROL_OUTB_POWER(pair_of_lmx2594->lmx2594_b, 0);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2100      	movs	r1, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff f964 	bl	8001cc4 <LMX2594_CONTROL_OUTB_POWER>
	}
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bdb0      	pop	{r4, r5, r7, pc}
 8002a04:	f3af 8000 	nop.w
 8002a08:	b0000000 	.word	0xb0000000
 8002a0c:	41fbf08e 	.word	0x41fbf08e

08002a10 <LMX2594_IN_PAIR_Set_Freq>:
void LMX2594_IN_PAIR_Out_Level(PAIR_OF_LMX2594_HandleTypeDef* pair_of_lmx2594, uint8_t out_level) {
	LMX2594_CONTROL_OUTA_LEVEL(pair_of_lmx2594->lmx2594_b, out_level);
	LMX2594_CONTROL_OUTB_LEVEL(pair_of_lmx2594->lmx2594_b, out_level);
}

void LMX2594_IN_PAIR_Set_Freq(PAIR_OF_LMX2594_HandleTypeDef* pair_of_lmx2594, double fout_b) {
 8002a10:	b5b0      	push	{r4, r5, r7, lr}
 8002a12:	b09c      	sub	sp, #112	; 0x70
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	ed87 0b00 	vstr	d0, [r7]
    uint32_t ndden_a = 0xFFFFFFFF;
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a20:	663b      	str	r3, [r7, #96]	; 0x60
    double fosc_a = 100000000;
 8002a22:	a3df      	add	r3, pc, #892	; (adr r3, 8002da0 <LMX2594_IN_PAIR_Set_Freq+0x390>)
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    uint32_t ndnum_b = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	657b      	str	r3, [r7, #84]	; 0x54
    uint32_t ndden_b = 1;
 8002a30:	2301      	movs	r3, #1
 8002a32:	653b      	str	r3, [r7, #80]	; 0x50
    uint16_t cd_a = 96;
 8002a34:	2360      	movs	r3, #96	; 0x60
 8002a36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    uint16_t cd_b;

    if (fout_b >= 7500000000) cd_b = 1;
 8002a3a:	a3db      	add	r3, pc, #876	; (adr r3, 8002da8 <LMX2594_IN_PAIR_Set_Freq+0x398>)
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a44:	f7fe f816 	bl	8000a74 <__aeabi_dcmpge>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <LMX2594_IN_PAIR_Set_Freq+0x46>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002a54:	e0e5      	b.n	8002c22 <LMX2594_IN_PAIR_Set_Freq+0x212>
    else if (fout_b >= 3750000000) cd_b = 2;
 8002a56:	a3d6      	add	r3, pc, #856	; (adr r3, 8002db0 <LMX2594_IN_PAIR_Set_Freq+0x3a0>)
 8002a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a60:	f7fe f808 	bl	8000a74 <__aeabi_dcmpge>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <LMX2594_IN_PAIR_Set_Freq+0x62>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002a70:	e0d7      	b.n	8002c22 <LMX2594_IN_PAIR_Set_Freq+0x212>
    else if (fout_b >= 1875000000) cd_b = 4;
 8002a72:	a3d1      	add	r3, pc, #836	; (adr r3, 8002db8 <LMX2594_IN_PAIR_Set_Freq+0x3a8>)
 8002a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a7c:	f7fd fffa 	bl	8000a74 <__aeabi_dcmpge>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <LMX2594_IN_PAIR_Set_Freq+0x7e>
 8002a86:	2304      	movs	r3, #4
 8002a88:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002a8c:	e0c9      	b.n	8002c22 <LMX2594_IN_PAIR_Set_Freq+0x212>
    else if (fout_b >= 1250000000) cd_b = 6;
 8002a8e:	a3cc      	add	r3, pc, #816	; (adr r3, 8002dc0 <LMX2594_IN_PAIR_Set_Freq+0x3b0>)
 8002a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a98:	f7fd ffec 	bl	8000a74 <__aeabi_dcmpge>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <LMX2594_IN_PAIR_Set_Freq+0x9a>
 8002aa2:	2306      	movs	r3, #6
 8002aa4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002aa8:	e0bb      	b.n	8002c22 <LMX2594_IN_PAIR_Set_Freq+0x212>
    else if (fout_b >= 937500000)  cd_b = 8;
 8002aaa:	a3c7      	add	r3, pc, #796	; (adr r3, 8002dc8 <LMX2594_IN_PAIR_Set_Freq+0x3b8>)
 8002aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ab4:	f7fd ffde 	bl	8000a74 <__aeabi_dcmpge>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <LMX2594_IN_PAIR_Set_Freq+0xb6>
 8002abe:	2308      	movs	r3, #8
 8002ac0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002ac4:	e0ad      	b.n	8002c22 <LMX2594_IN_PAIR_Set_Freq+0x212>
    else if (fout_b >= 625000000)  cd_b = 12;
 8002ac6:	a3c2      	add	r3, pc, #776	; (adr r3, 8002dd0 <LMX2594_IN_PAIR_Set_Freq+0x3c0>)
 8002ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002acc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ad0:	f7fd ffd0 	bl	8000a74 <__aeabi_dcmpge>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <LMX2594_IN_PAIR_Set_Freq+0xd2>
 8002ada:	230c      	movs	r3, #12
 8002adc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002ae0:	e09f      	b.n	8002c22 <LMX2594_IN_PAIR_Set_Freq+0x212>
    else if (fout_b >= 468750000)  cd_b = 16;
 8002ae2:	a3bd      	add	r3, pc, #756	; (adr r3, 8002dd8 <LMX2594_IN_PAIR_Set_Freq+0x3c8>)
 8002ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002aec:	f7fd ffc2 	bl	8000a74 <__aeabi_dcmpge>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <LMX2594_IN_PAIR_Set_Freq+0xee>
 8002af6:	2310      	movs	r3, #16
 8002af8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002afc:	e091      	b.n	8002c22 <LMX2594_IN_PAIR_Set_Freq+0x212>
    else if (fout_b >= 312500000)  cd_b = 24;
 8002afe:	a3b8      	add	r3, pc, #736	; (adr r3, 8002de0 <LMX2594_IN_PAIR_Set_Freq+0x3d0>)
 8002b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b08:	f7fd ffb4 	bl	8000a74 <__aeabi_dcmpge>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <LMX2594_IN_PAIR_Set_Freq+0x10a>
 8002b12:	2318      	movs	r3, #24
 8002b14:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002b18:	e083      	b.n	8002c22 <LMX2594_IN_PAIR_Set_Freq+0x212>
    else if (fout_b >= 234375000)  cd_b = 32;
 8002b1a:	a3b3      	add	r3, pc, #716	; (adr r3, 8002de8 <LMX2594_IN_PAIR_Set_Freq+0x3d8>)
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b24:	f7fd ffa6 	bl	8000a74 <__aeabi_dcmpge>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <LMX2594_IN_PAIR_Set_Freq+0x126>
 8002b2e:	2320      	movs	r3, #32
 8002b30:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002b34:	e075      	b.n	8002c22 <LMX2594_IN_PAIR_Set_Freq+0x212>
    else if (fout_b >= 156250000)  cd_b = 48;
 8002b36:	a3ae      	add	r3, pc, #696	; (adr r3, 8002df0 <LMX2594_IN_PAIR_Set_Freq+0x3e0>)
 8002b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b40:	f7fd ff98 	bl	8000a74 <__aeabi_dcmpge>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <LMX2594_IN_PAIR_Set_Freq+0x142>
 8002b4a:	2330      	movs	r3, #48	; 0x30
 8002b4c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002b50:	e067      	b.n	8002c22 <LMX2594_IN_PAIR_Set_Freq+0x212>
    else if (fout_b >= 117187500)  cd_b = 64;
 8002b52:	a3a9      	add	r3, pc, #676	; (adr r3, 8002df8 <LMX2594_IN_PAIR_Set_Freq+0x3e8>)
 8002b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b5c:	f7fd ff8a 	bl	8000a74 <__aeabi_dcmpge>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <LMX2594_IN_PAIR_Set_Freq+0x15e>
 8002b66:	2340      	movs	r3, #64	; 0x40
 8002b68:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002b6c:	e059      	b.n	8002c22 <LMX2594_IN_PAIR_Set_Freq+0x212>
    else if (fout_b >= 78125000)   cd_b = 96;
 8002b6e:	a3a4      	add	r3, pc, #656	; (adr r3, 8002e00 <LMX2594_IN_PAIR_Set_Freq+0x3f0>)
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b78:	f7fd ff7c 	bl	8000a74 <__aeabi_dcmpge>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <LMX2594_IN_PAIR_Set_Freq+0x17a>
 8002b82:	2360      	movs	r3, #96	; 0x60
 8002b84:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002b88:	e04b      	b.n	8002c22 <LMX2594_IN_PAIR_Set_Freq+0x212>
    else if (fout_b >= 58593750)   cd_b = 128;
 8002b8a:	a39f      	add	r3, pc, #636	; (adr r3, 8002e08 <LMX2594_IN_PAIR_Set_Freq+0x3f8>)
 8002b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b94:	f7fd ff6e 	bl	8000a74 <__aeabi_dcmpge>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <LMX2594_IN_PAIR_Set_Freq+0x196>
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002ba4:	e03d      	b.n	8002c22 <LMX2594_IN_PAIR_Set_Freq+0x212>
    else if (fout_b >= 39062500)   cd_b = 192;
 8002ba6:	a39a      	add	r3, pc, #616	; (adr r3, 8002e10 <LMX2594_IN_PAIR_Set_Freq+0x400>)
 8002ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bb0:	f7fd ff60 	bl	8000a74 <__aeabi_dcmpge>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <LMX2594_IN_PAIR_Set_Freq+0x1b2>
 8002bba:	23c0      	movs	r3, #192	; 0xc0
 8002bbc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002bc0:	e02f      	b.n	8002c22 <LMX2594_IN_PAIR_Set_Freq+0x212>
    else if (fout_b >= 29296875)   cd_b = 256;
 8002bc2:	a395      	add	r3, pc, #596	; (adr r3, 8002e18 <LMX2594_IN_PAIR_Set_Freq+0x408>)
 8002bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bcc:	f7fd ff52 	bl	8000a74 <__aeabi_dcmpge>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d004      	beq.n	8002be0 <LMX2594_IN_PAIR_Set_Freq+0x1d0>
 8002bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bda:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002bde:	e020      	b.n	8002c22 <LMX2594_IN_PAIR_Set_Freq+0x212>
    else if (fout_b >= 19531250)   cd_b = 384;
 8002be0:	a38f      	add	r3, pc, #572	; (adr r3, 8002e20 <LMX2594_IN_PAIR_Set_Freq+0x410>)
 8002be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bea:	f7fd ff43 	bl	8000a74 <__aeabi_dcmpge>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d004      	beq.n	8002bfe <LMX2594_IN_PAIR_Set_Freq+0x1ee>
 8002bf4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002bf8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002bfc:	e011      	b.n	8002c22 <LMX2594_IN_PAIR_Set_Freq+0x212>
    else if (fout_b >= 9765625)    cd_b = 768;
 8002bfe:	a38a      	add	r3, pc, #552	; (adr r3, 8002e28 <LMX2594_IN_PAIR_Set_Freq+0x418>)
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c08:	f7fd ff34 	bl	8000a74 <__aeabi_dcmpge>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d004      	beq.n	8002c1c <LMX2594_IN_PAIR_Set_Freq+0x20c>
 8002c12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c16:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002c1a:	e002      	b.n	8002c22 <LMX2594_IN_PAIR_Set_Freq+0x212>
    else                           cd_b = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    double fvco_b = fout_b * cd_b;
 8002c22:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fd fc34 	bl	8000494 <__aeabi_i2d>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c34:	f7fd fc98 	bl	8000568 <__aeabi_dmul>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    uint32_t ndn_b = round(fvco_b * 12075858607 / 1000000000000000000);
 8002c40:	a37b      	add	r3, pc, #492	; (adr r3, 8002e30 <LMX2594_IN_PAIR_Set_Freq+0x420>)
 8002c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c46:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002c4a:	f7fd fc8d 	bl	8000568 <__aeabi_dmul>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	a378      	add	r3, pc, #480	; (adr r3, 8002e38 <LMX2594_IN_PAIR_Set_Freq+0x428>)
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	f7fd fdae 	bl	80007bc <__aeabi_ddiv>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	ec43 2b17 	vmov	d7, r2, r3
 8002c68:	eeb0 0a47 	vmov.f32	s0, s14
 8002c6c:	eef0 0a67 	vmov.f32	s1, s15
 8002c70:	f002 f9ee 	bl	8005050 <round>
 8002c74:	ec53 2b10 	vmov	r2, r3, d0
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f7fd ff0e 	bl	8000a9c <__aeabi_d2uiz>
 8002c80:	4603      	mov	r3, r0
 8002c82:	63fb      	str	r3, [r7, #60]	; 0x3c
    double fosc_b = fvco_b / ndn_b;
 8002c84:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c86:	f7fd fbf5 	bl	8000474 <__aeabi_ui2d>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002c92:	f7fd fd93 	bl	80007bc <__aeabi_ddiv>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double fout_a = fosc_b;
 8002c9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ca2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double fvco_a = fout_a * cd_a;
 8002ca6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd fbf2 	bl	8000494 <__aeabi_i2d>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cb8:	f7fd fc56 	bl	8000568 <__aeabi_dmul>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double nd_a = fvco_a / fosc_a;
 8002cc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002cc8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ccc:	f7fd fd76 	bl	80007bc <__aeabi_ddiv>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint32_t ndn_a = floor(nd_a);
 8002cd8:	ed97 0b06 	vldr	d0, [r7, #24]
 8002cdc:	f002 f938 	bl	8004f50 <floor>
 8002ce0:	ec53 2b10 	vmov	r2, r3, d0
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	f7fd fed8 	bl	8000a9c <__aeabi_d2uiz>
 8002cec:	4603      	mov	r3, r0
 8002cee:	617b      	str	r3, [r7, #20]
    uint32_t ndnum_a = round((nd_a - ndn_a) * ndden_a);
 8002cf0:	6978      	ldr	r0, [r7, #20]
 8002cf2:	f7fd fbbf 	bl	8000474 <__aeabi_ui2d>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cfe:	f7fd fa7b 	bl	80001f8 <__aeabi_dsub>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4614      	mov	r4, r2
 8002d08:	461d      	mov	r5, r3
 8002d0a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002d0c:	f7fd fbb2 	bl	8000474 <__aeabi_ui2d>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4620      	mov	r0, r4
 8002d16:	4629      	mov	r1, r5
 8002d18:	f7fd fc26 	bl	8000568 <__aeabi_dmul>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	ec43 2b17 	vmov	d7, r2, r3
 8002d24:	eeb0 0a47 	vmov.f32	s0, s14
 8002d28:	eef0 0a67 	vmov.f32	s1, s15
 8002d2c:	f002 f990 	bl	8005050 <round>
 8002d30:	ec53 2b10 	vmov	r2, r3, d0
 8002d34:	4610      	mov	r0, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	f7fd feb0 	bl	8000a9c <__aeabi_d2uiz>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	613b      	str	r3, [r7, #16]

    pair_of_lmx2594->lmx2594_a->fosc = fosc_a;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6819      	ldr	r1, [r3, #0]
 8002d44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d48:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pair_of_lmx2594->lmx2594_b->fosc = fosc_b;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d54:	e9c1 2308 	strd	r2, r3, [r1, #32]
    LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION(pair_of_lmx2594->lmx2594_a, ndn_a, ndnum_a, ndden_a, cd_a);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	6979      	ldr	r1, [r7, #20]
 8002d68:	f7ff f80e 	bl	8001d88 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION>
    LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION(pair_of_lmx2594->lmx2594_b, ndn_b, ndnum_b, ndden_b, cd_b);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6858      	ldr	r0, [r3, #4]
 8002d70:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d7c:	f7ff f804 	bl	8001d88 <LMX2594_CONTROL_DIVIDERS_AND_CALIBRATION>
	LMX2594_CONTROL_OUTA_POWER(pair_of_lmx2594->lmx2594_b, 0);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2100      	movs	r1, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe ff6c 	bl	8001c64 <LMX2594_CONTROL_OUTA_POWER>
	LMX2594_CONTROL_OUTB_POWER(pair_of_lmx2594->lmx2594_b, 0);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2100      	movs	r1, #0
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe ff96 	bl	8001cc4 <LMX2594_CONTROL_OUTB_POWER>
}
 8002d98:	bf00      	nop
 8002d9a:	3768      	adds	r7, #104	; 0x68
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bdb0      	pop	{r4, r5, r7, pc}
 8002da0:	00000000 	.word	0x00000000
 8002da4:	4197d784 	.word	0x4197d784
 8002da8:	b0000000 	.word	0xb0000000
 8002dac:	41fbf08e 	.word	0x41fbf08e
 8002db0:	b0000000 	.word	0xb0000000
 8002db4:	41ebf08e 	.word	0x41ebf08e
 8002db8:	b0000000 	.word	0xb0000000
 8002dbc:	41dbf08e 	.word	0x41dbf08e
 8002dc0:	20000000 	.word	0x20000000
 8002dc4:	41d2a05f 	.word	0x41d2a05f
 8002dc8:	b0000000 	.word	0xb0000000
 8002dcc:	41cbf08e 	.word	0x41cbf08e
 8002dd0:	20000000 	.word	0x20000000
 8002dd4:	41c2a05f 	.word	0x41c2a05f
 8002dd8:	b0000000 	.word	0xb0000000
 8002ddc:	41bbf08e 	.word	0x41bbf08e
 8002de0:	20000000 	.word	0x20000000
 8002de4:	41b2a05f 	.word	0x41b2a05f
 8002de8:	b0000000 	.word	0xb0000000
 8002dec:	41abf08e 	.word	0x41abf08e
 8002df0:	20000000 	.word	0x20000000
 8002df4:	41a2a05f 	.word	0x41a2a05f
 8002df8:	b0000000 	.word	0xb0000000
 8002dfc:	419bf08e 	.word	0x419bf08e
 8002e00:	20000000 	.word	0x20000000
 8002e04:	4192a05f 	.word	0x4192a05f
 8002e08:	b0000000 	.word	0xb0000000
 8002e0c:	418bf08e 	.word	0x418bf08e
 8002e10:	20000000 	.word	0x20000000
 8002e14:	4182a05f 	.word	0x4182a05f
 8002e18:	b0000000 	.word	0xb0000000
 8002e1c:	417bf08e 	.word	0x417bf08e
 8002e20:	20000000 	.word	0x20000000
 8002e24:	4172a05f 	.word	0x4172a05f
 8002e28:	20000000 	.word	0x20000000
 8002e2c:	4162a05f 	.word	0x4162a05f
 8002e30:	d5780000 	.word	0xd5780000
 8002e34:	42067e37 	.word	0x42067e37
 8002e38:	674ec800 	.word	0x674ec800
 8002e3c:	43abc16d 	.word	0x43abc16d

08002e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e44:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <HAL_Init+0x40>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a0d      	ldr	r2, [pc, #52]	; (8002e80 <HAL_Init+0x40>)
 8002e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_Init+0x40>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <HAL_Init+0x40>)
 8002e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <HAL_Init+0x40>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <HAL_Init+0x40>)
 8002e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e68:	2003      	movs	r0, #3
 8002e6a:	f000 f90d 	bl	8003088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f000 f808 	bl	8002e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e74:	f7fe fb62 	bl	800153c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40023c00 	.word	0x40023c00

08002e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e8c:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <HAL_InitTick+0x54>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b12      	ldr	r3, [pc, #72]	; (8002edc <HAL_InitTick+0x58>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	4619      	mov	r1, r3
 8002e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 f917 	bl	80030d6 <HAL_SYSTICK_Config>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e00e      	b.n	8002ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b0f      	cmp	r3, #15
 8002eb6:	d80a      	bhi.n	8002ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec0:	f000 f8ed 	bl	800309e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ec4:	4a06      	ldr	r2, [pc, #24]	; (8002ee0 <HAL_InitTick+0x5c>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e000      	b.n	8002ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20000000 	.word	0x20000000
 8002edc:	200000ec 	.word	0x200000ec
 8002ee0:	200000e8 	.word	0x200000e8

08002ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <HAL_IncTick+0x20>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <HAL_IncTick+0x24>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	4a04      	ldr	r2, [pc, #16]	; (8002f08 <HAL_IncTick+0x24>)
 8002ef6:	6013      	str	r3, [r2, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	200000ec 	.word	0x200000ec
 8002f08:	200001a8 	.word	0x200001a8

08002f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <HAL_GetTick+0x14>)
 8002f12:	681b      	ldr	r3, [r3, #0]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	200001a8 	.word	0x200001a8

08002f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f34:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <__NVIC_SetPriorityGrouping+0x44>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f40:	4013      	ands	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f56:	4a04      	ldr	r2, [pc, #16]	; (8002f68 <__NVIC_SetPriorityGrouping+0x44>)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	60d3      	str	r3, [r2, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f70:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <__NVIC_GetPriorityGrouping+0x18>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	0a1b      	lsrs	r3, r3, #8
 8002f76:	f003 0307 	and.w	r3, r3, #7
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	6039      	str	r1, [r7, #0]
 8002f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	db0a      	blt.n	8002fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	490c      	ldr	r1, [pc, #48]	; (8002fd4 <__NVIC_SetPriority+0x4c>)
 8002fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa6:	0112      	lsls	r2, r2, #4
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	440b      	add	r3, r1
 8002fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb0:	e00a      	b.n	8002fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	4908      	ldr	r1, [pc, #32]	; (8002fd8 <__NVIC_SetPriority+0x50>)
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	3b04      	subs	r3, #4
 8002fc0:	0112      	lsls	r2, r2, #4
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	761a      	strb	r2, [r3, #24]
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	e000e100 	.word	0xe000e100
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b089      	sub	sp, #36	; 0x24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f1c3 0307 	rsb	r3, r3, #7
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	bf28      	it	cs
 8002ffa:	2304      	movcs	r3, #4
 8002ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3304      	adds	r3, #4
 8003002:	2b06      	cmp	r3, #6
 8003004:	d902      	bls.n	800300c <NVIC_EncodePriority+0x30>
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3b03      	subs	r3, #3
 800300a:	e000      	b.n	800300e <NVIC_EncodePriority+0x32>
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003010:	f04f 32ff 	mov.w	r2, #4294967295
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43da      	mvns	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	401a      	ands	r2, r3
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003024:	f04f 31ff 	mov.w	r1, #4294967295
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	fa01 f303 	lsl.w	r3, r1, r3
 800302e:	43d9      	mvns	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003034:	4313      	orrs	r3, r2
         );
}
 8003036:	4618      	mov	r0, r3
 8003038:	3724      	adds	r7, #36	; 0x24
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
	...

08003044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3b01      	subs	r3, #1
 8003050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003054:	d301      	bcc.n	800305a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003056:	2301      	movs	r3, #1
 8003058:	e00f      	b.n	800307a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800305a:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <SysTick_Config+0x40>)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3b01      	subs	r3, #1
 8003060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003062:	210f      	movs	r1, #15
 8003064:	f04f 30ff 	mov.w	r0, #4294967295
 8003068:	f7ff ff8e 	bl	8002f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <SysTick_Config+0x40>)
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003072:	4b04      	ldr	r3, [pc, #16]	; (8003084 <SysTick_Config+0x40>)
 8003074:	2207      	movs	r2, #7
 8003076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	e000e010 	.word	0xe000e010

08003088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff ff47 	bl	8002f24 <__NVIC_SetPriorityGrouping>
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800309e:	b580      	push	{r7, lr}
 80030a0:	b086      	sub	sp, #24
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	4603      	mov	r3, r0
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
 80030aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030b0:	f7ff ff5c 	bl	8002f6c <__NVIC_GetPriorityGrouping>
 80030b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	6978      	ldr	r0, [r7, #20]
 80030bc:	f7ff ff8e 	bl	8002fdc <NVIC_EncodePriority>
 80030c0:	4602      	mov	r2, r0
 80030c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff ff5d 	bl	8002f88 <__NVIC_SetPriority>
}
 80030ce:	bf00      	nop
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7ff ffb0 	bl	8003044 <SysTick_Config>
 80030e4:	4603      	mov	r3, r0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b089      	sub	sp, #36	; 0x24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003102:	2300      	movs	r3, #0
 8003104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	e177      	b.n	80033fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800310c:	2201      	movs	r2, #1
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	429a      	cmp	r2, r3
 8003126:	f040 8166 	bne.w	80033f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b01      	cmp	r3, #1
 8003134:	d005      	beq.n	8003142 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800313e:	2b02      	cmp	r3, #2
 8003140:	d130      	bne.n	80031a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	2203      	movs	r2, #3
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4013      	ands	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003178:	2201      	movs	r2, #1
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 0201 	and.w	r2, r3, #1
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d017      	beq.n	80031e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	2203      	movs	r2, #3
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d123      	bne.n	8003234 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	08da      	lsrs	r2, r3, #3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3208      	adds	r2, #8
 80031f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	220f      	movs	r2, #15
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	08da      	lsrs	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3208      	adds	r2, #8
 800322e:	69b9      	ldr	r1, [r7, #24]
 8003230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	2203      	movs	r2, #3
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 0203 	and.w	r2, r3, #3
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80c0 	beq.w	80033f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	4b66      	ldr	r3, [pc, #408]	; (8003414 <HAL_GPIO_Init+0x324>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	4a65      	ldr	r2, [pc, #404]	; (8003414 <HAL_GPIO_Init+0x324>)
 8003280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003284:	6453      	str	r3, [r2, #68]	; 0x44
 8003286:	4b63      	ldr	r3, [pc, #396]	; (8003414 <HAL_GPIO_Init+0x324>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003292:	4a61      	ldr	r2, [pc, #388]	; (8003418 <HAL_GPIO_Init+0x328>)
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	089b      	lsrs	r3, r3, #2
 8003298:	3302      	adds	r3, #2
 800329a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	220f      	movs	r2, #15
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43db      	mvns	r3, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4013      	ands	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a58      	ldr	r2, [pc, #352]	; (800341c <HAL_GPIO_Init+0x32c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d037      	beq.n	800332e <HAL_GPIO_Init+0x23e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a57      	ldr	r2, [pc, #348]	; (8003420 <HAL_GPIO_Init+0x330>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d031      	beq.n	800332a <HAL_GPIO_Init+0x23a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a56      	ldr	r2, [pc, #344]	; (8003424 <HAL_GPIO_Init+0x334>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d02b      	beq.n	8003326 <HAL_GPIO_Init+0x236>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a55      	ldr	r2, [pc, #340]	; (8003428 <HAL_GPIO_Init+0x338>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d025      	beq.n	8003322 <HAL_GPIO_Init+0x232>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a54      	ldr	r2, [pc, #336]	; (800342c <HAL_GPIO_Init+0x33c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01f      	beq.n	800331e <HAL_GPIO_Init+0x22e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a53      	ldr	r2, [pc, #332]	; (8003430 <HAL_GPIO_Init+0x340>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d019      	beq.n	800331a <HAL_GPIO_Init+0x22a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a52      	ldr	r2, [pc, #328]	; (8003434 <HAL_GPIO_Init+0x344>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d013      	beq.n	8003316 <HAL_GPIO_Init+0x226>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a51      	ldr	r2, [pc, #324]	; (8003438 <HAL_GPIO_Init+0x348>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00d      	beq.n	8003312 <HAL_GPIO_Init+0x222>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a50      	ldr	r2, [pc, #320]	; (800343c <HAL_GPIO_Init+0x34c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d007      	beq.n	800330e <HAL_GPIO_Init+0x21e>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a4f      	ldr	r2, [pc, #316]	; (8003440 <HAL_GPIO_Init+0x350>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d101      	bne.n	800330a <HAL_GPIO_Init+0x21a>
 8003306:	2309      	movs	r3, #9
 8003308:	e012      	b.n	8003330 <HAL_GPIO_Init+0x240>
 800330a:	230a      	movs	r3, #10
 800330c:	e010      	b.n	8003330 <HAL_GPIO_Init+0x240>
 800330e:	2308      	movs	r3, #8
 8003310:	e00e      	b.n	8003330 <HAL_GPIO_Init+0x240>
 8003312:	2307      	movs	r3, #7
 8003314:	e00c      	b.n	8003330 <HAL_GPIO_Init+0x240>
 8003316:	2306      	movs	r3, #6
 8003318:	e00a      	b.n	8003330 <HAL_GPIO_Init+0x240>
 800331a:	2305      	movs	r3, #5
 800331c:	e008      	b.n	8003330 <HAL_GPIO_Init+0x240>
 800331e:	2304      	movs	r3, #4
 8003320:	e006      	b.n	8003330 <HAL_GPIO_Init+0x240>
 8003322:	2303      	movs	r3, #3
 8003324:	e004      	b.n	8003330 <HAL_GPIO_Init+0x240>
 8003326:	2302      	movs	r3, #2
 8003328:	e002      	b.n	8003330 <HAL_GPIO_Init+0x240>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <HAL_GPIO_Init+0x240>
 800332e:	2300      	movs	r3, #0
 8003330:	69fa      	ldr	r2, [r7, #28]
 8003332:	f002 0203 	and.w	r2, r2, #3
 8003336:	0092      	lsls	r2, r2, #2
 8003338:	4093      	lsls	r3, r2
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003340:	4935      	ldr	r1, [pc, #212]	; (8003418 <HAL_GPIO_Init+0x328>)
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	089b      	lsrs	r3, r3, #2
 8003346:	3302      	adds	r3, #2
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800334e:	4b3d      	ldr	r3, [pc, #244]	; (8003444 <HAL_GPIO_Init+0x354>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003372:	4a34      	ldr	r2, [pc, #208]	; (8003444 <HAL_GPIO_Init+0x354>)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003378:	4b32      	ldr	r3, [pc, #200]	; (8003444 <HAL_GPIO_Init+0x354>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800339c:	4a29      	ldr	r2, [pc, #164]	; (8003444 <HAL_GPIO_Init+0x354>)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033a2:	4b28      	ldr	r3, [pc, #160]	; (8003444 <HAL_GPIO_Init+0x354>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4013      	ands	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033c6:	4a1f      	ldr	r2, [pc, #124]	; (8003444 <HAL_GPIO_Init+0x354>)
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033cc:	4b1d      	ldr	r3, [pc, #116]	; (8003444 <HAL_GPIO_Init+0x354>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033f0:	4a14      	ldr	r2, [pc, #80]	; (8003444 <HAL_GPIO_Init+0x354>)
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	3301      	adds	r3, #1
 80033fa:	61fb      	str	r3, [r7, #28]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	2b0f      	cmp	r3, #15
 8003400:	f67f ae84 	bls.w	800310c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003404:	bf00      	nop
 8003406:	bf00      	nop
 8003408:	3724      	adds	r7, #36	; 0x24
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800
 8003418:	40013800 	.word	0x40013800
 800341c:	40020000 	.word	0x40020000
 8003420:	40020400 	.word	0x40020400
 8003424:	40020800 	.word	0x40020800
 8003428:	40020c00 	.word	0x40020c00
 800342c:	40021000 	.word	0x40021000
 8003430:	40021400 	.word	0x40021400
 8003434:	40021800 	.word	0x40021800
 8003438:	40021c00 	.word	0x40021c00
 800343c:	40022000 	.word	0x40022000
 8003440:	40022400 	.word	0x40022400
 8003444:	40013c00 	.word	0x40013c00

08003448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	807b      	strh	r3, [r7, #2]
 8003454:	4613      	mov	r3, r2
 8003456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003458:	787b      	ldrb	r3, [r7, #1]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800345e:	887a      	ldrh	r2, [r7, #2]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003464:	e003      	b.n	800346e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003466:	887b      	ldrh	r3, [r7, #2]
 8003468:	041a      	lsls	r2, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	619a      	str	r2, [r3, #24]
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e267      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d075      	beq.n	8003586 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800349a:	4b88      	ldr	r3, [pc, #544]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d00c      	beq.n	80034c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034a6:	4b85      	ldr	r3, [pc, #532]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d112      	bne.n	80034d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034b2:	4b82      	ldr	r3, [pc, #520]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034be:	d10b      	bne.n	80034d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c0:	4b7e      	ldr	r3, [pc, #504]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d05b      	beq.n	8003584 <HAL_RCC_OscConfig+0x108>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d157      	bne.n	8003584 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e242      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e0:	d106      	bne.n	80034f0 <HAL_RCC_OscConfig+0x74>
 80034e2:	4b76      	ldr	r3, [pc, #472]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a75      	ldr	r2, [pc, #468]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80034e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	e01d      	b.n	800352c <HAL_RCC_OscConfig+0xb0>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0x98>
 80034fa:	4b70      	ldr	r3, [pc, #448]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a6f      	ldr	r2, [pc, #444]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	4b6d      	ldr	r3, [pc, #436]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a6c      	ldr	r2, [pc, #432]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 800350c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	e00b      	b.n	800352c <HAL_RCC_OscConfig+0xb0>
 8003514:	4b69      	ldr	r3, [pc, #420]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a68      	ldr	r2, [pc, #416]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 800351a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4b66      	ldr	r3, [pc, #408]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a65      	ldr	r2, [pc, #404]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800352a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d013      	beq.n	800355c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003534:	f7ff fcea 	bl	8002f0c <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800353c:	f7ff fce6 	bl	8002f0c <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	; 0x64
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e207      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	4b5b      	ldr	r3, [pc, #364]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0xc0>
 800355a:	e014      	b.n	8003586 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7ff fcd6 	bl	8002f0c <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003564:	f7ff fcd2 	bl	8002f0c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	; 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e1f3      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003576:	4b51      	ldr	r3, [pc, #324]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0xe8>
 8003582:	e000      	b.n	8003586 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d063      	beq.n	800365a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003592:	4b4a      	ldr	r3, [pc, #296]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800359e:	4b47      	ldr	r3, [pc, #284]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d11c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035aa:	4b44      	ldr	r3, [pc, #272]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d116      	bne.n	80035e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b6:	4b41      	ldr	r3, [pc, #260]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_RCC_OscConfig+0x152>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e1c7      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ce:	4b3b      	ldr	r3, [pc, #236]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4937      	ldr	r1, [pc, #220]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e2:	e03a      	b.n	800365a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d020      	beq.n	800362e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ec:	4b34      	ldr	r3, [pc, #208]	; (80036c0 <HAL_RCC_OscConfig+0x244>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f2:	f7ff fc8b 	bl	8002f0c <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035fa:	f7ff fc87 	bl	8002f0c <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e1a8      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360c:	4b2b      	ldr	r3, [pc, #172]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f0      	beq.n	80035fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003618:	4b28      	ldr	r3, [pc, #160]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	4925      	ldr	r1, [pc, #148]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003628:	4313      	orrs	r3, r2
 800362a:	600b      	str	r3, [r1, #0]
 800362c:	e015      	b.n	800365a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800362e:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <HAL_RCC_OscConfig+0x244>)
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7ff fc6a 	bl	8002f0c <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800363c:	f7ff fc66 	bl	8002f0c <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e187      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800364e:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d036      	beq.n	80036d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d016      	beq.n	800369c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800366e:	4b15      	ldr	r3, [pc, #84]	; (80036c4 <HAL_RCC_OscConfig+0x248>)
 8003670:	2201      	movs	r2, #1
 8003672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003674:	f7ff fc4a 	bl	8002f0c <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800367c:	f7ff fc46 	bl	8002f0c <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e167      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368e:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0x200>
 800369a:	e01b      	b.n	80036d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800369c:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <HAL_RCC_OscConfig+0x248>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a2:	f7ff fc33 	bl	8002f0c <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a8:	e00e      	b.n	80036c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036aa:	f7ff fc2f 	bl	8002f0c <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d907      	bls.n	80036c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e150      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
 80036bc:	40023800 	.word	0x40023800
 80036c0:	42470000 	.word	0x42470000
 80036c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c8:	4b88      	ldr	r3, [pc, #544]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 80036ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1ea      	bne.n	80036aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 8097 	beq.w	8003810 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036e2:	2300      	movs	r3, #0
 80036e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036e6:	4b81      	ldr	r3, [pc, #516]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10f      	bne.n	8003712 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	4b7d      	ldr	r3, [pc, #500]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	4a7c      	ldr	r2, [pc, #496]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 80036fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003700:	6413      	str	r3, [r2, #64]	; 0x40
 8003702:	4b7a      	ldr	r3, [pc, #488]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370a:	60bb      	str	r3, [r7, #8]
 800370c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800370e:	2301      	movs	r3, #1
 8003710:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003712:	4b77      	ldr	r3, [pc, #476]	; (80038f0 <HAL_RCC_OscConfig+0x474>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371a:	2b00      	cmp	r3, #0
 800371c:	d118      	bne.n	8003750 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800371e:	4b74      	ldr	r3, [pc, #464]	; (80038f0 <HAL_RCC_OscConfig+0x474>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a73      	ldr	r2, [pc, #460]	; (80038f0 <HAL_RCC_OscConfig+0x474>)
 8003724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372a:	f7ff fbef 	bl	8002f0c <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003732:	f7ff fbeb 	bl	8002f0c <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e10c      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003744:	4b6a      	ldr	r3, [pc, #424]	; (80038f0 <HAL_RCC_OscConfig+0x474>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d106      	bne.n	8003766 <HAL_RCC_OscConfig+0x2ea>
 8003758:	4b64      	ldr	r3, [pc, #400]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 800375a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375c:	4a63      	ldr	r2, [pc, #396]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	6713      	str	r3, [r2, #112]	; 0x70
 8003764:	e01c      	b.n	80037a0 <HAL_RCC_OscConfig+0x324>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b05      	cmp	r3, #5
 800376c:	d10c      	bne.n	8003788 <HAL_RCC_OscConfig+0x30c>
 800376e:	4b5f      	ldr	r3, [pc, #380]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003772:	4a5e      	ldr	r2, [pc, #376]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 8003774:	f043 0304 	orr.w	r3, r3, #4
 8003778:	6713      	str	r3, [r2, #112]	; 0x70
 800377a:	4b5c      	ldr	r3, [pc, #368]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377e:	4a5b      	ldr	r2, [pc, #364]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	6713      	str	r3, [r2, #112]	; 0x70
 8003786:	e00b      	b.n	80037a0 <HAL_RCC_OscConfig+0x324>
 8003788:	4b58      	ldr	r3, [pc, #352]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 800378a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378c:	4a57      	ldr	r2, [pc, #348]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 800378e:	f023 0301 	bic.w	r3, r3, #1
 8003792:	6713      	str	r3, [r2, #112]	; 0x70
 8003794:	4b55      	ldr	r3, [pc, #340]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 8003796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003798:	4a54      	ldr	r2, [pc, #336]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 800379a:	f023 0304 	bic.w	r3, r3, #4
 800379e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d015      	beq.n	80037d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a8:	f7ff fbb0 	bl	8002f0c <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b0:	f7ff fbac 	bl	8002f0c <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e0cb      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c6:	4b49      	ldr	r3, [pc, #292]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0ee      	beq.n	80037b0 <HAL_RCC_OscConfig+0x334>
 80037d2:	e014      	b.n	80037fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d4:	f7ff fb9a 	bl	8002f0c <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037da:	e00a      	b.n	80037f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037dc:	f7ff fb96 	bl	8002f0c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e0b5      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f2:	4b3e      	ldr	r3, [pc, #248]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1ee      	bne.n	80037dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d105      	bne.n	8003810 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003804:	4b39      	ldr	r3, [pc, #228]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	4a38      	ldr	r2, [pc, #224]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 800380a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800380e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80a1 	beq.w	800395c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800381a:	4b34      	ldr	r3, [pc, #208]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 030c 	and.w	r3, r3, #12
 8003822:	2b08      	cmp	r3, #8
 8003824:	d05c      	beq.n	80038e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d141      	bne.n	80038b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382e:	4b31      	ldr	r3, [pc, #196]	; (80038f4 <HAL_RCC_OscConfig+0x478>)
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003834:	f7ff fb6a 	bl	8002f0c <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800383c:	f7ff fb66 	bl	8002f0c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e087      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384e:	4b27      	ldr	r3, [pc, #156]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69da      	ldr	r2, [r3, #28]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	019b      	lsls	r3, r3, #6
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	3b01      	subs	r3, #1
 8003874:	041b      	lsls	r3, r3, #16
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	061b      	lsls	r3, r3, #24
 800387e:	491b      	ldr	r1, [pc, #108]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 8003880:	4313      	orrs	r3, r2
 8003882:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003884:	4b1b      	ldr	r3, [pc, #108]	; (80038f4 <HAL_RCC_OscConfig+0x478>)
 8003886:	2201      	movs	r2, #1
 8003888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388a:	f7ff fb3f 	bl	8002f0c <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003892:	f7ff fb3b 	bl	8002f0c <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e05c      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a4:	4b11      	ldr	r3, [pc, #68]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCC_OscConfig+0x416>
 80038b0:	e054      	b.n	800395c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b2:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <HAL_RCC_OscConfig+0x478>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7ff fb28 	bl	8002f0c <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c0:	f7ff fb24 	bl	8002f0c <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e045      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d2:	4b06      	ldr	r3, [pc, #24]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x444>
 80038de:	e03d      	b.n	800395c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d107      	bne.n	80038f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e038      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
 80038ec:	40023800 	.word	0x40023800
 80038f0:	40007000 	.word	0x40007000
 80038f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038f8:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <HAL_RCC_OscConfig+0x4ec>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d028      	beq.n	8003958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003910:	429a      	cmp	r2, r3
 8003912:	d121      	bne.n	8003958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391e:	429a      	cmp	r2, r3
 8003920:	d11a      	bne.n	8003958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003928:	4013      	ands	r3, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800392e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003930:	4293      	cmp	r3, r2
 8003932:	d111      	bne.n	8003958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393e:	085b      	lsrs	r3, r3, #1
 8003940:	3b01      	subs	r3, #1
 8003942:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003944:	429a      	cmp	r2, r3
 8003946:	d107      	bne.n	8003958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003954:	429a      	cmp	r2, r3
 8003956:	d001      	beq.n	800395c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40023800 	.word	0x40023800

0800396c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0cc      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003980:	4b68      	ldr	r3, [pc, #416]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d90c      	bls.n	80039a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b65      	ldr	r3, [pc, #404]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003996:	4b63      	ldr	r3, [pc, #396]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0b8      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d020      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039c0:	4b59      	ldr	r3, [pc, #356]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	4a58      	ldr	r2, [pc, #352]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039d8:	4b53      	ldr	r3, [pc, #332]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	4a52      	ldr	r2, [pc, #328]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e4:	4b50      	ldr	r3, [pc, #320]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	494d      	ldr	r1, [pc, #308]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d044      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d107      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0a:	4b47      	ldr	r3, [pc, #284]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d119      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e07f      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d003      	beq.n	8003a2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d107      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2a:	4b3f      	ldr	r3, [pc, #252]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e06f      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3a:	4b3b      	ldr	r3, [pc, #236]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e067      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a4a:	4b37      	ldr	r3, [pc, #220]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f023 0203 	bic.w	r2, r3, #3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	4934      	ldr	r1, [pc, #208]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a5c:	f7ff fa56 	bl	8002f0c <HAL_GetTick>
 8003a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a62:	e00a      	b.n	8003a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a64:	f7ff fa52 	bl	8002f0c <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e04f      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7a:	4b2b      	ldr	r3, [pc, #172]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 020c 	and.w	r2, r3, #12
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d1eb      	bne.n	8003a64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a8c:	4b25      	ldr	r3, [pc, #148]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d20c      	bcs.n	8003ab4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9a:	4b22      	ldr	r3, [pc, #136]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa2:	4b20      	ldr	r3, [pc, #128]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e032      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac0:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4916      	ldr	r1, [pc, #88]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ade:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	490e      	ldr	r1, [pc, #56]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003af2:	f000 f821 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 8003af6:	4602      	mov	r2, r0
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	490a      	ldr	r1, [pc, #40]	; (8003b2c <HAL_RCC_ClockConfig+0x1c0>)
 8003b04:	5ccb      	ldrb	r3, [r1, r3]
 8003b06:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0a:	4a09      	ldr	r2, [pc, #36]	; (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b0e:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <HAL_RCC_ClockConfig+0x1c8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff f9b6 	bl	8002e84 <HAL_InitTick>

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023c00 	.word	0x40023c00
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	0800511c 	.word	0x0800511c
 8003b30:	20000000 	.word	0x20000000
 8003b34:	200000e8 	.word	0x200000e8

08003b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b3c:	b094      	sub	sp, #80	; 0x50
 8003b3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	647b      	str	r3, [r7, #68]	; 0x44
 8003b44:	2300      	movs	r3, #0
 8003b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b48:	2300      	movs	r3, #0
 8003b4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b50:	4b79      	ldr	r3, [pc, #484]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 030c 	and.w	r3, r3, #12
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d00d      	beq.n	8003b78 <HAL_RCC_GetSysClockFreq+0x40>
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	f200 80e1 	bhi.w	8003d24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0x34>
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d003      	beq.n	8003b72 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b6a:	e0db      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b6c:	4b73      	ldr	r3, [pc, #460]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b70:	e0db      	b.n	8003d2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b72:	4b73      	ldr	r3, [pc, #460]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b76:	e0d8      	b.n	8003d2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b78:	4b6f      	ldr	r3, [pc, #444]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b82:	4b6d      	ldr	r3, [pc, #436]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d063      	beq.n	8003c56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b8e:	4b6a      	ldr	r3, [pc, #424]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	099b      	lsrs	r3, r3, #6
 8003b94:	2200      	movs	r2, #0
 8003b96:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ba6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003baa:	4622      	mov	r2, r4
 8003bac:	462b      	mov	r3, r5
 8003bae:	f04f 0000 	mov.w	r0, #0
 8003bb2:	f04f 0100 	mov.w	r1, #0
 8003bb6:	0159      	lsls	r1, r3, #5
 8003bb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bbc:	0150      	lsls	r0, r2, #5
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	1a51      	subs	r1, r2, r1
 8003bc6:	6139      	str	r1, [r7, #16]
 8003bc8:	4629      	mov	r1, r5
 8003bca:	eb63 0301 	sbc.w	r3, r3, r1
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bdc:	4659      	mov	r1, fp
 8003bde:	018b      	lsls	r3, r1, #6
 8003be0:	4651      	mov	r1, sl
 8003be2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003be6:	4651      	mov	r1, sl
 8003be8:	018a      	lsls	r2, r1, #6
 8003bea:	4651      	mov	r1, sl
 8003bec:	ebb2 0801 	subs.w	r8, r2, r1
 8003bf0:	4659      	mov	r1, fp
 8003bf2:	eb63 0901 	sbc.w	r9, r3, r1
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c0a:	4690      	mov	r8, r2
 8003c0c:	4699      	mov	r9, r3
 8003c0e:	4623      	mov	r3, r4
 8003c10:	eb18 0303 	adds.w	r3, r8, r3
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	462b      	mov	r3, r5
 8003c18:	eb49 0303 	adc.w	r3, r9, r3
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	f04f 0200 	mov.w	r2, #0
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	024b      	lsls	r3, r1, #9
 8003c2e:	4621      	mov	r1, r4
 8003c30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c34:	4621      	mov	r1, r4
 8003c36:	024a      	lsls	r2, r1, #9
 8003c38:	4610      	mov	r0, r2
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c3e:	2200      	movs	r2, #0
 8003c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c48:	f7fc ff48 	bl	8000adc <__aeabi_uldivmod>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4613      	mov	r3, r2
 8003c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c54:	e058      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c56:	4b38      	ldr	r3, [pc, #224]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	099b      	lsrs	r3, r3, #6
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	4618      	mov	r0, r3
 8003c60:	4611      	mov	r1, r2
 8003c62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c66:	623b      	str	r3, [r7, #32]
 8003c68:	2300      	movs	r3, #0
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c70:	4642      	mov	r2, r8
 8003c72:	464b      	mov	r3, r9
 8003c74:	f04f 0000 	mov.w	r0, #0
 8003c78:	f04f 0100 	mov.w	r1, #0
 8003c7c:	0159      	lsls	r1, r3, #5
 8003c7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c82:	0150      	lsls	r0, r2, #5
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4641      	mov	r1, r8
 8003c8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c8e:	4649      	mov	r1, r9
 8003c90:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ca0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ca4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ca8:	ebb2 040a 	subs.w	r4, r2, sl
 8003cac:	eb63 050b 	sbc.w	r5, r3, fp
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	00eb      	lsls	r3, r5, #3
 8003cba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cbe:	00e2      	lsls	r2, r4, #3
 8003cc0:	4614      	mov	r4, r2
 8003cc2:	461d      	mov	r5, r3
 8003cc4:	4643      	mov	r3, r8
 8003cc6:	18e3      	adds	r3, r4, r3
 8003cc8:	603b      	str	r3, [r7, #0]
 8003cca:	464b      	mov	r3, r9
 8003ccc:	eb45 0303 	adc.w	r3, r5, r3
 8003cd0:	607b      	str	r3, [r7, #4]
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cde:	4629      	mov	r1, r5
 8003ce0:	028b      	lsls	r3, r1, #10
 8003ce2:	4621      	mov	r1, r4
 8003ce4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ce8:	4621      	mov	r1, r4
 8003cea:	028a      	lsls	r2, r1, #10
 8003cec:	4610      	mov	r0, r2
 8003cee:	4619      	mov	r1, r3
 8003cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	61bb      	str	r3, [r7, #24]
 8003cf6:	61fa      	str	r2, [r7, #28]
 8003cf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cfc:	f7fc feee 	bl	8000adc <__aeabi_uldivmod>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4613      	mov	r3, r2
 8003d06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d08:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	0c1b      	lsrs	r3, r3, #16
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	3301      	adds	r3, #1
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d22:	e002      	b.n	8003d2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3750      	adds	r7, #80	; 0x50
 8003d30:	46bd      	mov	sp, r7
 8003d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d36:	bf00      	nop
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	00f42400 	.word	0x00f42400
 8003d40:	007a1200 	.word	0x007a1200

08003d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d48:	4b03      	ldr	r3, [pc, #12]	; (8003d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	20000000 	.word	0x20000000

08003d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d60:	f7ff fff0 	bl	8003d44 <HAL_RCC_GetHCLKFreq>
 8003d64:	4602      	mov	r2, r0
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	0a9b      	lsrs	r3, r3, #10
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	4903      	ldr	r1, [pc, #12]	; (8003d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d72:	5ccb      	ldrb	r3, [r1, r3]
 8003d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	0800512c 	.word	0x0800512c

08003d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d88:	f7ff ffdc 	bl	8003d44 <HAL_RCC_GetHCLKFreq>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	0b5b      	lsrs	r3, r3, #13
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	4903      	ldr	r1, [pc, #12]	; (8003da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d9a:	5ccb      	ldrb	r3, [r1, r3]
 8003d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40023800 	.word	0x40023800
 8003da8:	0800512c 	.word	0x0800512c

08003dac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e07b      	b.n	8003eb6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d108      	bne.n	8003dd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dce:	d009      	beq.n	8003de4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	61da      	str	r2, [r3, #28]
 8003dd6:	e005      	b.n	8003de4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fd fbc4 	bl	800158c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	431a      	orrs	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e68:	ea42 0103 	orr.w	r1, r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	0c1b      	lsrs	r3, r3, #16
 8003e82:	f003 0104 	and.w	r1, r3, #4
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	f003 0210 	and.w	r2, r3, #16
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ea4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b088      	sub	sp, #32
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	603b      	str	r3, [r7, #0]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_SPI_Transmit+0x22>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e126      	b.n	800412e <HAL_SPI_Transmit+0x270>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ee8:	f7ff f810 	bl	8002f0c <HAL_GetTick>
 8003eec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003eee:	88fb      	ldrh	r3, [r7, #6]
 8003ef0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d002      	beq.n	8003f04 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003efe:	2302      	movs	r3, #2
 8003f00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f02:	e10b      	b.n	800411c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <HAL_SPI_Transmit+0x52>
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d102      	bne.n	8003f16 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f14:	e102      	b.n	800411c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2203      	movs	r2, #3
 8003f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	88fa      	ldrh	r2, [r7, #6]
 8003f2e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	88fa      	ldrh	r2, [r7, #6]
 8003f34:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f5c:	d10f      	bne.n	8003f7e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	d007      	beq.n	8003f9c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa4:	d14b      	bne.n	800403e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_SPI_Transmit+0xf6>
 8003fae:	8afb      	ldrh	r3, [r7, #22]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d13e      	bne.n	8004032 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	881a      	ldrh	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	1c9a      	adds	r2, r3, #2
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003fd8:	e02b      	b.n	8004032 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d112      	bne.n	800400e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	881a      	ldrh	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	1c9a      	adds	r2, r3, #2
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	86da      	strh	r2, [r3, #54]	; 0x36
 800400c:	e011      	b.n	8004032 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800400e:	f7fe ff7d 	bl	8002f0c <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d803      	bhi.n	8004026 <HAL_SPI_Transmit+0x168>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004024:	d102      	bne.n	800402c <HAL_SPI_Transmit+0x16e>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d102      	bne.n	8004032 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004030:	e074      	b.n	800411c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1ce      	bne.n	8003fda <HAL_SPI_Transmit+0x11c>
 800403c:	e04c      	b.n	80040d8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_SPI_Transmit+0x18e>
 8004046:	8afb      	ldrh	r3, [r7, #22]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d140      	bne.n	80040ce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	330c      	adds	r3, #12
 8004056:	7812      	ldrb	r2, [r2, #0]
 8004058:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004072:	e02c      	b.n	80040ce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b02      	cmp	r3, #2
 8004080:	d113      	bne.n	80040aa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	330c      	adds	r3, #12
 800408c:	7812      	ldrb	r2, [r2, #0]
 800408e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80040a8:	e011      	b.n	80040ce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040aa:	f7fe ff2f 	bl	8002f0c <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d803      	bhi.n	80040c2 <HAL_SPI_Transmit+0x204>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c0:	d102      	bne.n	80040c8 <HAL_SPI_Transmit+0x20a>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d102      	bne.n	80040ce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040cc:	e026      	b.n	800411c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1cd      	bne.n	8004074 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	6839      	ldr	r1, [r7, #0]
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 fa55 	bl	800458c <SPI_EndRxTxTransaction>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10a      	bne.n	800410c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	77fb      	strb	r3, [r7, #31]
 8004118:	e000      	b.n	800411c <HAL_SPI_Transmit+0x25e>
  }

error:
 800411a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800412c:	7ffb      	ldrb	r3, [r7, #31]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3720      	adds	r7, #32
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b08c      	sub	sp, #48	; 0x30
 800413a:	af00      	add	r7, sp, #0
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	607a      	str	r2, [r7, #4]
 8004142:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004144:	2301      	movs	r3, #1
 8004146:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004154:	2b01      	cmp	r3, #1
 8004156:	d101      	bne.n	800415c <HAL_SPI_TransmitReceive+0x26>
 8004158:	2302      	movs	r3, #2
 800415a:	e18a      	b.n	8004472 <HAL_SPI_TransmitReceive+0x33c>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004164:	f7fe fed2 	bl	8002f0c <HAL_GetTick>
 8004168:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800417a:	887b      	ldrh	r3, [r7, #2]
 800417c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800417e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004182:	2b01      	cmp	r3, #1
 8004184:	d00f      	beq.n	80041a6 <HAL_SPI_TransmitReceive+0x70>
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800418c:	d107      	bne.n	800419e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d103      	bne.n	800419e <HAL_SPI_TransmitReceive+0x68>
 8004196:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800419a:	2b04      	cmp	r3, #4
 800419c:	d003      	beq.n	80041a6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800419e:	2302      	movs	r3, #2
 80041a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041a4:	e15b      	b.n	800445e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <HAL_SPI_TransmitReceive+0x82>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <HAL_SPI_TransmitReceive+0x82>
 80041b2:	887b      	ldrh	r3, [r7, #2]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d103      	bne.n	80041c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041be:	e14e      	b.n	800445e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d003      	beq.n	80041d4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2205      	movs	r2, #5
 80041d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	887a      	ldrh	r2, [r7, #2]
 80041e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	887a      	ldrh	r2, [r7, #2]
 80041ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	887a      	ldrh	r2, [r7, #2]
 80041f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	887a      	ldrh	r2, [r7, #2]
 80041fc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004214:	2b40      	cmp	r3, #64	; 0x40
 8004216:	d007      	beq.n	8004228 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004226:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004230:	d178      	bne.n	8004324 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_SPI_TransmitReceive+0x10a>
 800423a:	8b7b      	ldrh	r3, [r7, #26]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d166      	bne.n	800430e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	881a      	ldrh	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	1c9a      	adds	r2, r3, #2
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004264:	e053      	b.n	800430e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b02      	cmp	r3, #2
 8004272:	d11b      	bne.n	80042ac <HAL_SPI_TransmitReceive+0x176>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d016      	beq.n	80042ac <HAL_SPI_TransmitReceive+0x176>
 800427e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004280:	2b01      	cmp	r3, #1
 8004282:	d113      	bne.n	80042ac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	881a      	ldrh	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004294:	1c9a      	adds	r2, r3, #2
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d119      	bne.n	80042ee <HAL_SPI_TransmitReceive+0x1b8>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d014      	beq.n	80042ee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ce:	b292      	uxth	r2, r2
 80042d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d6:	1c9a      	adds	r2, r3, #2
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042ea:	2301      	movs	r3, #1
 80042ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042ee:	f7fe fe0d 	bl	8002f0c <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d807      	bhi.n	800430e <HAL_SPI_TransmitReceive+0x1d8>
 80042fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004304:	d003      	beq.n	800430e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800430c:	e0a7      	b.n	800445e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1a6      	bne.n	8004266 <HAL_SPI_TransmitReceive+0x130>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1a1      	bne.n	8004266 <HAL_SPI_TransmitReceive+0x130>
 8004322:	e07c      	b.n	800441e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <HAL_SPI_TransmitReceive+0x1fc>
 800432c:	8b7b      	ldrh	r3, [r7, #26]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d16b      	bne.n	800440a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	330c      	adds	r3, #12
 800433c:	7812      	ldrb	r2, [r2, #0]
 800433e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004358:	e057      	b.n	800440a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b02      	cmp	r3, #2
 8004366:	d11c      	bne.n	80043a2 <HAL_SPI_TransmitReceive+0x26c>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d017      	beq.n	80043a2 <HAL_SPI_TransmitReceive+0x26c>
 8004372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004374:	2b01      	cmp	r3, #1
 8004376:	d114      	bne.n	80043a2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	330c      	adds	r3, #12
 8004382:	7812      	ldrb	r2, [r2, #0]
 8004384:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d119      	bne.n	80043e4 <HAL_SPI_TransmitReceive+0x2ae>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d014      	beq.n	80043e4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043e0:	2301      	movs	r3, #1
 80043e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043e4:	f7fe fd92 	bl	8002f0c <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d803      	bhi.n	80043fc <HAL_SPI_TransmitReceive+0x2c6>
 80043f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fa:	d102      	bne.n	8004402 <HAL_SPI_TransmitReceive+0x2cc>
 80043fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d103      	bne.n	800440a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004408:	e029      	b.n	800445e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1a2      	bne.n	800435a <HAL_SPI_TransmitReceive+0x224>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d19d      	bne.n	800435a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800441e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004420:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f8b2 	bl	800458c <SPI_EndRxTxTransaction>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d006      	beq.n	800443c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2220      	movs	r2, #32
 8004438:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800443a:	e010      	b.n	800445e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10b      	bne.n	800445c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	e000      	b.n	800445e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800445c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800446e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004472:	4618      	mov	r0, r3
 8004474:	3730      	adds	r7, #48	; 0x30
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	4613      	mov	r3, r2
 800448a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800448c:	f7fe fd3e 	bl	8002f0c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004494:	1a9b      	subs	r3, r3, r2
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	4413      	add	r3, r2
 800449a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800449c:	f7fe fd36 	bl	8002f0c <HAL_GetTick>
 80044a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044a2:	4b39      	ldr	r3, [pc, #228]	; (8004588 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	015b      	lsls	r3, r3, #5
 80044a8:	0d1b      	lsrs	r3, r3, #20
 80044aa:	69fa      	ldr	r2, [r7, #28]
 80044ac:	fb02 f303 	mul.w	r3, r2, r3
 80044b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044b2:	e054      	b.n	800455e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ba:	d050      	beq.n	800455e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044bc:	f7fe fd26 	bl	8002f0c <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d902      	bls.n	80044d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d13d      	bne.n	800454e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ea:	d111      	bne.n	8004510 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f4:	d004      	beq.n	8004500 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044fe:	d107      	bne.n	8004510 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800450e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004518:	d10f      	bne.n	800453a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004538:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e017      	b.n	800457e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	3b01      	subs	r3, #1
 800455c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	4013      	ands	r3, r2
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	429a      	cmp	r2, r3
 800456c:	bf0c      	ite	eq
 800456e:	2301      	moveq	r3, #1
 8004570:	2300      	movne	r3, #0
 8004572:	b2db      	uxtb	r3, r3
 8004574:	461a      	mov	r2, r3
 8004576:	79fb      	ldrb	r3, [r7, #7]
 8004578:	429a      	cmp	r2, r3
 800457a:	d19b      	bne.n	80044b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3720      	adds	r7, #32
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20000000 	.word	0x20000000

0800458c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af02      	add	r7, sp, #8
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004598:	4b1b      	ldr	r3, [pc, #108]	; (8004608 <SPI_EndRxTxTransaction+0x7c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1b      	ldr	r2, [pc, #108]	; (800460c <SPI_EndRxTxTransaction+0x80>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	0d5b      	lsrs	r3, r3, #21
 80045a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045a8:	fb02 f303 	mul.w	r3, r2, r3
 80045ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045b6:	d112      	bne.n	80045de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2200      	movs	r2, #0
 80045c0:	2180      	movs	r1, #128	; 0x80
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f7ff ff5a 	bl	800447c <SPI_WaitFlagStateUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d016      	beq.n	80045fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d2:	f043 0220 	orr.w	r2, r3, #32
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e00f      	b.n	80045fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f4:	2b80      	cmp	r3, #128	; 0x80
 80045f6:	d0f2      	beq.n	80045de <SPI_EndRxTxTransaction+0x52>
 80045f8:	e000      	b.n	80045fc <SPI_EndRxTxTransaction+0x70>
        break;
 80045fa:	bf00      	nop
  }

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20000000 	.word	0x20000000
 800460c:	165e9f81 	.word	0x165e9f81

08004610 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e03f      	b.n	80046a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fc fff0 	bl	800161c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2224      	movs	r2, #36	; 0x24
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004652:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f9cb 	bl	80049f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691a      	ldr	r2, [r3, #16]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004668:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695a      	ldr	r2, [r3, #20]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004678:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004688:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b08a      	sub	sp, #40	; 0x28
 80046ae:	af02      	add	r7, sp, #8
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	603b      	str	r3, [r7, #0]
 80046b6:	4613      	mov	r3, r2
 80046b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	d17c      	bne.n	80047c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <HAL_UART_Transmit+0x2c>
 80046d0:	88fb      	ldrh	r3, [r7, #6]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e075      	b.n	80047c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_UART_Transmit+0x3e>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e06e      	b.n	80047c6 <HAL_UART_Transmit+0x11c>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2221      	movs	r2, #33	; 0x21
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046fe:	f7fe fc05 	bl	8002f0c <HAL_GetTick>
 8004702:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	88fa      	ldrh	r2, [r7, #6]
 8004708:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	88fa      	ldrh	r2, [r7, #6]
 800470e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004718:	d108      	bne.n	800472c <HAL_UART_Transmit+0x82>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d104      	bne.n	800472c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	e003      	b.n	8004734 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004730:	2300      	movs	r3, #0
 8004732:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800473c:	e02a      	b.n	8004794 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2200      	movs	r2, #0
 8004746:	2180      	movs	r1, #128	; 0x80
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 f8e2 	bl	8004912 <UART_WaitOnFlagUntilTimeout>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e036      	b.n	80047c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10b      	bne.n	8004776 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800476c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	3302      	adds	r3, #2
 8004772:	61bb      	str	r3, [r7, #24]
 8004774:	e007      	b.n	8004786 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	781a      	ldrb	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	3301      	adds	r3, #1
 8004784:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1cf      	bne.n	800473e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2200      	movs	r2, #0
 80047a6:	2140      	movs	r1, #64	; 0x40
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f8b2 	bl	8004912 <UART_WaitOnFlagUntilTimeout>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e006      	b.n	80047c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	e000      	b.n	80047c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80047c4:	2302      	movs	r3, #2
  }
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3720      	adds	r7, #32
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b08a      	sub	sp, #40	; 0x28
 80047d2:	af02      	add	r7, sp, #8
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	603b      	str	r3, [r7, #0]
 80047da:	4613      	mov	r3, r2
 80047dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	f040 808c 	bne.w	8004908 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <HAL_UART_Receive+0x2e>
 80047f6:	88fb      	ldrh	r3, [r7, #6]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e084      	b.n	800490a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004806:	2b01      	cmp	r3, #1
 8004808:	d101      	bne.n	800480e <HAL_UART_Receive+0x40>
 800480a:	2302      	movs	r3, #2
 800480c:	e07d      	b.n	800490a <HAL_UART_Receive+0x13c>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2222      	movs	r2, #34	; 0x22
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800482a:	f7fe fb6f 	bl	8002f0c <HAL_GetTick>
 800482e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	88fa      	ldrh	r2, [r7, #6]
 8004834:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	88fa      	ldrh	r2, [r7, #6]
 800483a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004844:	d108      	bne.n	8004858 <HAL_UART_Receive+0x8a>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d104      	bne.n	8004858 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	61bb      	str	r3, [r7, #24]
 8004856:	e003      	b.n	8004860 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800485c:	2300      	movs	r3, #0
 800485e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004868:	e043      	b.n	80048f2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2200      	movs	r2, #0
 8004872:	2120      	movs	r1, #32
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f84c 	bl	8004912 <UART_WaitOnFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e042      	b.n	800490a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10c      	bne.n	80048a4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	b29b      	uxth	r3, r3
 8004892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004896:	b29a      	uxth	r2, r3
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	3302      	adds	r3, #2
 80048a0:	61bb      	str	r3, [r7, #24]
 80048a2:	e01f      	b.n	80048e4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ac:	d007      	beq.n	80048be <HAL_UART_Receive+0xf0>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10a      	bne.n	80048cc <HAL_UART_Receive+0xfe>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	701a      	strb	r2, [r3, #0]
 80048ca:	e008      	b.n	80048de <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	3301      	adds	r3, #1
 80048e2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1b6      	bne.n	800486a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	e000      	b.n	800490a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004908:	2302      	movs	r3, #2
  }
}
 800490a:	4618      	mov	r0, r3
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b090      	sub	sp, #64	; 0x40
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	603b      	str	r3, [r7, #0]
 800491e:	4613      	mov	r3, r2
 8004920:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004922:	e050      	b.n	80049c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492a:	d04c      	beq.n	80049c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800492c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800492e:	2b00      	cmp	r3, #0
 8004930:	d007      	beq.n	8004942 <UART_WaitOnFlagUntilTimeout+0x30>
 8004932:	f7fe faeb 	bl	8002f0c <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800493e:	429a      	cmp	r2, r3
 8004940:	d241      	bcs.n	80049c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	330c      	adds	r3, #12
 8004948:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	330c      	adds	r3, #12
 8004960:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004962:	637a      	str	r2, [r7, #52]	; 0x34
 8004964:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e5      	bne.n	8004942 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3314      	adds	r3, #20
 800497c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	613b      	str	r3, [r7, #16]
   return(result);
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f023 0301 	bic.w	r3, r3, #1
 800498c:	63bb      	str	r3, [r7, #56]	; 0x38
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3314      	adds	r3, #20
 8004994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004996:	623a      	str	r2, [r7, #32]
 8004998:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499a:	69f9      	ldr	r1, [r7, #28]
 800499c:	6a3a      	ldr	r2, [r7, #32]
 800499e:	e841 2300 	strex	r3, r2, [r1]
 80049a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e5      	bne.n	8004976 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e00f      	b.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4013      	ands	r3, r2
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	bf0c      	ite	eq
 80049d6:	2301      	moveq	r3, #1
 80049d8:	2300      	movne	r3, #0
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	461a      	mov	r2, r3
 80049de:	79fb      	ldrb	r3, [r7, #7]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d09f      	beq.n	8004924 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3740      	adds	r7, #64	; 0x40
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049f4:	b0c0      	sub	sp, #256	; 0x100
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0c:	68d9      	ldr	r1, [r3, #12]
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	ea40 0301 	orr.w	r3, r0, r1
 8004a18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a48:	f021 010c 	bic.w	r1, r1, #12
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a56:	430b      	orrs	r3, r1
 8004a58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6a:	6999      	ldr	r1, [r3, #24]
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	ea40 0301 	orr.w	r3, r0, r1
 8004a76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	4b8f      	ldr	r3, [pc, #572]	; (8004cbc <UART_SetConfig+0x2cc>)
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d005      	beq.n	8004a90 <UART_SetConfig+0xa0>
 8004a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4b8d      	ldr	r3, [pc, #564]	; (8004cc0 <UART_SetConfig+0x2d0>)
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d104      	bne.n	8004a9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a90:	f7ff f978 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 8004a94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a98:	e003      	b.n	8004aa2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a9a:	f7ff f95f 	bl	8003d5c <HAL_RCC_GetPCLK1Freq>
 8004a9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aac:	f040 810c 	bne.w	8004cc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004aba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004abe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ac2:	4622      	mov	r2, r4
 8004ac4:	462b      	mov	r3, r5
 8004ac6:	1891      	adds	r1, r2, r2
 8004ac8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004aca:	415b      	adcs	r3, r3
 8004acc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ace:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	eb12 0801 	adds.w	r8, r2, r1
 8004ad8:	4629      	mov	r1, r5
 8004ada:	eb43 0901 	adc.w	r9, r3, r1
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004af2:	4690      	mov	r8, r2
 8004af4:	4699      	mov	r9, r3
 8004af6:	4623      	mov	r3, r4
 8004af8:	eb18 0303 	adds.w	r3, r8, r3
 8004afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b00:	462b      	mov	r3, r5
 8004b02:	eb49 0303 	adc.w	r3, r9, r3
 8004b06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b1e:	460b      	mov	r3, r1
 8004b20:	18db      	adds	r3, r3, r3
 8004b22:	653b      	str	r3, [r7, #80]	; 0x50
 8004b24:	4613      	mov	r3, r2
 8004b26:	eb42 0303 	adc.w	r3, r2, r3
 8004b2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b34:	f7fb ffd2 	bl	8000adc <__aeabi_uldivmod>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4b61      	ldr	r3, [pc, #388]	; (8004cc4 <UART_SetConfig+0x2d4>)
 8004b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	011c      	lsls	r4, r3, #4
 8004b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b58:	4642      	mov	r2, r8
 8004b5a:	464b      	mov	r3, r9
 8004b5c:	1891      	adds	r1, r2, r2
 8004b5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b60:	415b      	adcs	r3, r3
 8004b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b68:	4641      	mov	r1, r8
 8004b6a:	eb12 0a01 	adds.w	sl, r2, r1
 8004b6e:	4649      	mov	r1, r9
 8004b70:	eb43 0b01 	adc.w	fp, r3, r1
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b88:	4692      	mov	sl, r2
 8004b8a:	469b      	mov	fp, r3
 8004b8c:	4643      	mov	r3, r8
 8004b8e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b96:	464b      	mov	r3, r9
 8004b98:	eb4b 0303 	adc.w	r3, fp, r3
 8004b9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	18db      	adds	r3, r3, r3
 8004bb8:	643b      	str	r3, [r7, #64]	; 0x40
 8004bba:	4613      	mov	r3, r2
 8004bbc:	eb42 0303 	adc.w	r3, r2, r3
 8004bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8004bc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bca:	f7fb ff87 	bl	8000adc <__aeabi_uldivmod>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	4b3b      	ldr	r3, [pc, #236]	; (8004cc4 <UART_SetConfig+0x2d4>)
 8004bd6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	2264      	movs	r2, #100	; 0x64
 8004bde:	fb02 f303 	mul.w	r3, r2, r3
 8004be2:	1acb      	subs	r3, r1, r3
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bea:	4b36      	ldr	r3, [pc, #216]	; (8004cc4 <UART_SetConfig+0x2d4>)
 8004bec:	fba3 2302 	umull	r2, r3, r3, r2
 8004bf0:	095b      	lsrs	r3, r3, #5
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bf8:	441c      	add	r4, r3
 8004bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c0c:	4642      	mov	r2, r8
 8004c0e:	464b      	mov	r3, r9
 8004c10:	1891      	adds	r1, r2, r2
 8004c12:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c14:	415b      	adcs	r3, r3
 8004c16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c1c:	4641      	mov	r1, r8
 8004c1e:	1851      	adds	r1, r2, r1
 8004c20:	6339      	str	r1, [r7, #48]	; 0x30
 8004c22:	4649      	mov	r1, r9
 8004c24:	414b      	adcs	r3, r1
 8004c26:	637b      	str	r3, [r7, #52]	; 0x34
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c34:	4659      	mov	r1, fp
 8004c36:	00cb      	lsls	r3, r1, #3
 8004c38:	4651      	mov	r1, sl
 8004c3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c3e:	4651      	mov	r1, sl
 8004c40:	00ca      	lsls	r2, r1, #3
 8004c42:	4610      	mov	r0, r2
 8004c44:	4619      	mov	r1, r3
 8004c46:	4603      	mov	r3, r0
 8004c48:	4642      	mov	r2, r8
 8004c4a:	189b      	adds	r3, r3, r2
 8004c4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c50:	464b      	mov	r3, r9
 8004c52:	460a      	mov	r2, r1
 8004c54:	eb42 0303 	adc.w	r3, r2, r3
 8004c58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c70:	460b      	mov	r3, r1
 8004c72:	18db      	adds	r3, r3, r3
 8004c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c76:	4613      	mov	r3, r2
 8004c78:	eb42 0303 	adc.w	r3, r2, r3
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c86:	f7fb ff29 	bl	8000adc <__aeabi_uldivmod>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4b0d      	ldr	r3, [pc, #52]	; (8004cc4 <UART_SetConfig+0x2d4>)
 8004c90:	fba3 1302 	umull	r1, r3, r3, r2
 8004c94:	095b      	lsrs	r3, r3, #5
 8004c96:	2164      	movs	r1, #100	; 0x64
 8004c98:	fb01 f303 	mul.w	r3, r1, r3
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	3332      	adds	r3, #50	; 0x32
 8004ca2:	4a08      	ldr	r2, [pc, #32]	; (8004cc4 <UART_SetConfig+0x2d4>)
 8004ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca8:	095b      	lsrs	r3, r3, #5
 8004caa:	f003 0207 	and.w	r2, r3, #7
 8004cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4422      	add	r2, r4
 8004cb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cb8:	e105      	b.n	8004ec6 <UART_SetConfig+0x4d6>
 8004cba:	bf00      	nop
 8004cbc:	40011000 	.word	0x40011000
 8004cc0:	40011400 	.word	0x40011400
 8004cc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004cd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004cda:	4642      	mov	r2, r8
 8004cdc:	464b      	mov	r3, r9
 8004cde:	1891      	adds	r1, r2, r2
 8004ce0:	6239      	str	r1, [r7, #32]
 8004ce2:	415b      	adcs	r3, r3
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cea:	4641      	mov	r1, r8
 8004cec:	1854      	adds	r4, r2, r1
 8004cee:	4649      	mov	r1, r9
 8004cf0:	eb43 0501 	adc.w	r5, r3, r1
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	00eb      	lsls	r3, r5, #3
 8004cfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d02:	00e2      	lsls	r2, r4, #3
 8004d04:	4614      	mov	r4, r2
 8004d06:	461d      	mov	r5, r3
 8004d08:	4643      	mov	r3, r8
 8004d0a:	18e3      	adds	r3, r4, r3
 8004d0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d10:	464b      	mov	r3, r9
 8004d12:	eb45 0303 	adc.w	r3, r5, r3
 8004d16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d36:	4629      	mov	r1, r5
 8004d38:	008b      	lsls	r3, r1, #2
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d40:	4621      	mov	r1, r4
 8004d42:	008a      	lsls	r2, r1, #2
 8004d44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d48:	f7fb fec8 	bl	8000adc <__aeabi_uldivmod>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4b60      	ldr	r3, [pc, #384]	; (8004ed4 <UART_SetConfig+0x4e4>)
 8004d52:	fba3 2302 	umull	r2, r3, r3, r2
 8004d56:	095b      	lsrs	r3, r3, #5
 8004d58:	011c      	lsls	r4, r3, #4
 8004d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d6c:	4642      	mov	r2, r8
 8004d6e:	464b      	mov	r3, r9
 8004d70:	1891      	adds	r1, r2, r2
 8004d72:	61b9      	str	r1, [r7, #24]
 8004d74:	415b      	adcs	r3, r3
 8004d76:	61fb      	str	r3, [r7, #28]
 8004d78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d7c:	4641      	mov	r1, r8
 8004d7e:	1851      	adds	r1, r2, r1
 8004d80:	6139      	str	r1, [r7, #16]
 8004d82:	4649      	mov	r1, r9
 8004d84:	414b      	adcs	r3, r1
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d94:	4659      	mov	r1, fp
 8004d96:	00cb      	lsls	r3, r1, #3
 8004d98:	4651      	mov	r1, sl
 8004d9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d9e:	4651      	mov	r1, sl
 8004da0:	00ca      	lsls	r2, r1, #3
 8004da2:	4610      	mov	r0, r2
 8004da4:	4619      	mov	r1, r3
 8004da6:	4603      	mov	r3, r0
 8004da8:	4642      	mov	r2, r8
 8004daa:	189b      	adds	r3, r3, r2
 8004dac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004db0:	464b      	mov	r3, r9
 8004db2:	460a      	mov	r2, r1
 8004db4:	eb42 0303 	adc.w	r3, r2, r3
 8004db8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	008b      	lsls	r3, r1, #2
 8004dd8:	4641      	mov	r1, r8
 8004dda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dde:	4641      	mov	r1, r8
 8004de0:	008a      	lsls	r2, r1, #2
 8004de2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004de6:	f7fb fe79 	bl	8000adc <__aeabi_uldivmod>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4b39      	ldr	r3, [pc, #228]	; (8004ed4 <UART_SetConfig+0x4e4>)
 8004df0:	fba3 1302 	umull	r1, r3, r3, r2
 8004df4:	095b      	lsrs	r3, r3, #5
 8004df6:	2164      	movs	r1, #100	; 0x64
 8004df8:	fb01 f303 	mul.w	r3, r1, r3
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	3332      	adds	r3, #50	; 0x32
 8004e02:	4a34      	ldr	r2, [pc, #208]	; (8004ed4 <UART_SetConfig+0x4e4>)
 8004e04:	fba2 2303 	umull	r2, r3, r2, r3
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e0e:	441c      	add	r4, r3
 8004e10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e14:	2200      	movs	r2, #0
 8004e16:	673b      	str	r3, [r7, #112]	; 0x70
 8004e18:	677a      	str	r2, [r7, #116]	; 0x74
 8004e1a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e1e:	4642      	mov	r2, r8
 8004e20:	464b      	mov	r3, r9
 8004e22:	1891      	adds	r1, r2, r2
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	415b      	adcs	r3, r3
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e2e:	4641      	mov	r1, r8
 8004e30:	1851      	adds	r1, r2, r1
 8004e32:	6039      	str	r1, [r7, #0]
 8004e34:	4649      	mov	r1, r9
 8004e36:	414b      	adcs	r3, r1
 8004e38:	607b      	str	r3, [r7, #4]
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	f04f 0300 	mov.w	r3, #0
 8004e42:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e46:	4659      	mov	r1, fp
 8004e48:	00cb      	lsls	r3, r1, #3
 8004e4a:	4651      	mov	r1, sl
 8004e4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e50:	4651      	mov	r1, sl
 8004e52:	00ca      	lsls	r2, r1, #3
 8004e54:	4610      	mov	r0, r2
 8004e56:	4619      	mov	r1, r3
 8004e58:	4603      	mov	r3, r0
 8004e5a:	4642      	mov	r2, r8
 8004e5c:	189b      	adds	r3, r3, r2
 8004e5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e60:	464b      	mov	r3, r9
 8004e62:	460a      	mov	r2, r1
 8004e64:	eb42 0303 	adc.w	r3, r2, r3
 8004e68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	663b      	str	r3, [r7, #96]	; 0x60
 8004e74:	667a      	str	r2, [r7, #100]	; 0x64
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e82:	4649      	mov	r1, r9
 8004e84:	008b      	lsls	r3, r1, #2
 8004e86:	4641      	mov	r1, r8
 8004e88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e8c:	4641      	mov	r1, r8
 8004e8e:	008a      	lsls	r2, r1, #2
 8004e90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e94:	f7fb fe22 	bl	8000adc <__aeabi_uldivmod>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <UART_SetConfig+0x4e4>)
 8004e9e:	fba3 1302 	umull	r1, r3, r3, r2
 8004ea2:	095b      	lsrs	r3, r3, #5
 8004ea4:	2164      	movs	r1, #100	; 0x64
 8004ea6:	fb01 f303 	mul.w	r3, r1, r3
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	3332      	adds	r3, #50	; 0x32
 8004eb0:	4a08      	ldr	r2, [pc, #32]	; (8004ed4 <UART_SetConfig+0x4e4>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	f003 020f 	and.w	r2, r3, #15
 8004ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4422      	add	r2, r4
 8004ec4:	609a      	str	r2, [r3, #8]
}
 8004ec6:	bf00      	nop
 8004ec8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ed2:	bf00      	nop
 8004ed4:	51eb851f 	.word	0x51eb851f

08004ed8 <__libc_init_array>:
 8004ed8:	b570      	push	{r4, r5, r6, lr}
 8004eda:	4d0d      	ldr	r5, [pc, #52]	; (8004f10 <__libc_init_array+0x38>)
 8004edc:	4c0d      	ldr	r4, [pc, #52]	; (8004f14 <__libc_init_array+0x3c>)
 8004ede:	1b64      	subs	r4, r4, r5
 8004ee0:	10a4      	asrs	r4, r4, #2
 8004ee2:	2600      	movs	r6, #0
 8004ee4:	42a6      	cmp	r6, r4
 8004ee6:	d109      	bne.n	8004efc <__libc_init_array+0x24>
 8004ee8:	4d0b      	ldr	r5, [pc, #44]	; (8004f18 <__libc_init_array+0x40>)
 8004eea:	4c0c      	ldr	r4, [pc, #48]	; (8004f1c <__libc_init_array+0x44>)
 8004eec:	f000 f8f6 	bl	80050dc <_init>
 8004ef0:	1b64      	subs	r4, r4, r5
 8004ef2:	10a4      	asrs	r4, r4, #2
 8004ef4:	2600      	movs	r6, #0
 8004ef6:	42a6      	cmp	r6, r4
 8004ef8:	d105      	bne.n	8004f06 <__libc_init_array+0x2e>
 8004efa:	bd70      	pop	{r4, r5, r6, pc}
 8004efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f00:	4798      	blx	r3
 8004f02:	3601      	adds	r6, #1
 8004f04:	e7ee      	b.n	8004ee4 <__libc_init_array+0xc>
 8004f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f0a:	4798      	blx	r3
 8004f0c:	3601      	adds	r6, #1
 8004f0e:	e7f2      	b.n	8004ef6 <__libc_init_array+0x1e>
 8004f10:	0800513c 	.word	0x0800513c
 8004f14:	0800513c 	.word	0x0800513c
 8004f18:	0800513c 	.word	0x0800513c
 8004f1c:	08005140 	.word	0x08005140

08004f20 <memcpy>:
 8004f20:	440a      	add	r2, r1
 8004f22:	4291      	cmp	r1, r2
 8004f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f28:	d100      	bne.n	8004f2c <memcpy+0xc>
 8004f2a:	4770      	bx	lr
 8004f2c:	b510      	push	{r4, lr}
 8004f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f36:	4291      	cmp	r1, r2
 8004f38:	d1f9      	bne.n	8004f2e <memcpy+0xe>
 8004f3a:	bd10      	pop	{r4, pc}

08004f3c <memset>:
 8004f3c:	4402      	add	r2, r0
 8004f3e:	4603      	mov	r3, r0
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d100      	bne.n	8004f46 <memset+0xa>
 8004f44:	4770      	bx	lr
 8004f46:	f803 1b01 	strb.w	r1, [r3], #1
 8004f4a:	e7f9      	b.n	8004f40 <memset+0x4>
 8004f4c:	0000      	movs	r0, r0
	...

08004f50 <floor>:
 8004f50:	ec51 0b10 	vmov	r0, r1, d0
 8004f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f58:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004f5c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004f60:	2e13      	cmp	r6, #19
 8004f62:	ee10 5a10 	vmov	r5, s0
 8004f66:	ee10 8a10 	vmov	r8, s0
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	dc32      	bgt.n	8004fd4 <floor+0x84>
 8004f6e:	2e00      	cmp	r6, #0
 8004f70:	da14      	bge.n	8004f9c <floor+0x4c>
 8004f72:	a333      	add	r3, pc, #204	; (adr r3, 8005040 <floor+0xf0>)
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	f7fb f940 	bl	80001fc <__adddf3>
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f7fb fd82 	bl	8000a88 <__aeabi_dcmpgt>
 8004f84:	b138      	cbz	r0, 8004f96 <floor+0x46>
 8004f86:	2c00      	cmp	r4, #0
 8004f88:	da57      	bge.n	800503a <floor+0xea>
 8004f8a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004f8e:	431d      	orrs	r5, r3
 8004f90:	d001      	beq.n	8004f96 <floor+0x46>
 8004f92:	4c2d      	ldr	r4, [pc, #180]	; (8005048 <floor+0xf8>)
 8004f94:	2500      	movs	r5, #0
 8004f96:	4621      	mov	r1, r4
 8004f98:	4628      	mov	r0, r5
 8004f9a:	e025      	b.n	8004fe8 <floor+0x98>
 8004f9c:	4f2b      	ldr	r7, [pc, #172]	; (800504c <floor+0xfc>)
 8004f9e:	4137      	asrs	r7, r6
 8004fa0:	ea01 0307 	and.w	r3, r1, r7
 8004fa4:	4303      	orrs	r3, r0
 8004fa6:	d01f      	beq.n	8004fe8 <floor+0x98>
 8004fa8:	a325      	add	r3, pc, #148	; (adr r3, 8005040 <floor+0xf0>)
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	f7fb f925 	bl	80001fc <__adddf3>
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f7fb fd67 	bl	8000a88 <__aeabi_dcmpgt>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d0eb      	beq.n	8004f96 <floor+0x46>
 8004fbe:	2c00      	cmp	r4, #0
 8004fc0:	bfbe      	ittt	lt
 8004fc2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004fc6:	fa43 f606 	asrlt.w	r6, r3, r6
 8004fca:	19a4      	addlt	r4, r4, r6
 8004fcc:	ea24 0407 	bic.w	r4, r4, r7
 8004fd0:	2500      	movs	r5, #0
 8004fd2:	e7e0      	b.n	8004f96 <floor+0x46>
 8004fd4:	2e33      	cmp	r6, #51	; 0x33
 8004fd6:	dd0b      	ble.n	8004ff0 <floor+0xa0>
 8004fd8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004fdc:	d104      	bne.n	8004fe8 <floor+0x98>
 8004fde:	ee10 2a10 	vmov	r2, s0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	f7fb f90a 	bl	80001fc <__adddf3>
 8004fe8:	ec41 0b10 	vmov	d0, r0, r1
 8004fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ff0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff8:	fa23 f707 	lsr.w	r7, r3, r7
 8004ffc:	4207      	tst	r7, r0
 8004ffe:	d0f3      	beq.n	8004fe8 <floor+0x98>
 8005000:	a30f      	add	r3, pc, #60	; (adr r3, 8005040 <floor+0xf0>)
 8005002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005006:	f7fb f8f9 	bl	80001fc <__adddf3>
 800500a:	2200      	movs	r2, #0
 800500c:	2300      	movs	r3, #0
 800500e:	f7fb fd3b 	bl	8000a88 <__aeabi_dcmpgt>
 8005012:	2800      	cmp	r0, #0
 8005014:	d0bf      	beq.n	8004f96 <floor+0x46>
 8005016:	2c00      	cmp	r4, #0
 8005018:	da02      	bge.n	8005020 <floor+0xd0>
 800501a:	2e14      	cmp	r6, #20
 800501c:	d103      	bne.n	8005026 <floor+0xd6>
 800501e:	3401      	adds	r4, #1
 8005020:	ea25 0507 	bic.w	r5, r5, r7
 8005024:	e7b7      	b.n	8004f96 <floor+0x46>
 8005026:	2301      	movs	r3, #1
 8005028:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800502c:	fa03 f606 	lsl.w	r6, r3, r6
 8005030:	4435      	add	r5, r6
 8005032:	4545      	cmp	r5, r8
 8005034:	bf38      	it	cc
 8005036:	18e4      	addcc	r4, r4, r3
 8005038:	e7f2      	b.n	8005020 <floor+0xd0>
 800503a:	2500      	movs	r5, #0
 800503c:	462c      	mov	r4, r5
 800503e:	e7aa      	b.n	8004f96 <floor+0x46>
 8005040:	8800759c 	.word	0x8800759c
 8005044:	7e37e43c 	.word	0x7e37e43c
 8005048:	bff00000 	.word	0xbff00000
 800504c:	000fffff 	.word	0x000fffff

08005050 <round>:
 8005050:	ec51 0b10 	vmov	r0, r1, d0
 8005054:	b570      	push	{r4, r5, r6, lr}
 8005056:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800505a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800505e:	2c13      	cmp	r4, #19
 8005060:	ee10 2a10 	vmov	r2, s0
 8005064:	460b      	mov	r3, r1
 8005066:	dc19      	bgt.n	800509c <round+0x4c>
 8005068:	2c00      	cmp	r4, #0
 800506a:	da09      	bge.n	8005080 <round+0x30>
 800506c:	3401      	adds	r4, #1
 800506e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8005072:	d103      	bne.n	800507c <round+0x2c>
 8005074:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005078:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800507c:	2200      	movs	r2, #0
 800507e:	e028      	b.n	80050d2 <round+0x82>
 8005080:	4d15      	ldr	r5, [pc, #84]	; (80050d8 <round+0x88>)
 8005082:	4125      	asrs	r5, r4
 8005084:	ea01 0605 	and.w	r6, r1, r5
 8005088:	4332      	orrs	r2, r6
 800508a:	d00e      	beq.n	80050aa <round+0x5a>
 800508c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005090:	fa42 f404 	asr.w	r4, r2, r4
 8005094:	4423      	add	r3, r4
 8005096:	ea23 0305 	bic.w	r3, r3, r5
 800509a:	e7ef      	b.n	800507c <round+0x2c>
 800509c:	2c33      	cmp	r4, #51	; 0x33
 800509e:	dd07      	ble.n	80050b0 <round+0x60>
 80050a0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80050a4:	d101      	bne.n	80050aa <round+0x5a>
 80050a6:	f7fb f8a9 	bl	80001fc <__adddf3>
 80050aa:	ec41 0b10 	vmov	d0, r0, r1
 80050ae:	bd70      	pop	{r4, r5, r6, pc}
 80050b0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80050b4:	f04f 35ff 	mov.w	r5, #4294967295
 80050b8:	40f5      	lsrs	r5, r6
 80050ba:	4228      	tst	r0, r5
 80050bc:	d0f5      	beq.n	80050aa <round+0x5a>
 80050be:	2101      	movs	r1, #1
 80050c0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80050c4:	fa01 f404 	lsl.w	r4, r1, r4
 80050c8:	1912      	adds	r2, r2, r4
 80050ca:	bf28      	it	cs
 80050cc:	185b      	addcs	r3, r3, r1
 80050ce:	ea22 0205 	bic.w	r2, r2, r5
 80050d2:	4619      	mov	r1, r3
 80050d4:	4610      	mov	r0, r2
 80050d6:	e7e8      	b.n	80050aa <round+0x5a>
 80050d8:	000fffff 	.word	0x000fffff

080050dc <_init>:
 80050dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050de:	bf00      	nop
 80050e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e2:	bc08      	pop	{r3}
 80050e4:	469e      	mov	lr, r3
 80050e6:	4770      	bx	lr

080050e8 <_fini>:
 80050e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ea:	bf00      	nop
 80050ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ee:	bc08      	pop	{r3}
 80050f0:	469e      	mov	lr, r3
 80050f2:	4770      	bx	lr
